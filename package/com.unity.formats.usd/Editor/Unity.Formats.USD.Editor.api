// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Formats.USD
{
    public static class PackageUtils
    {
        public static string GetCallerRelativeToProjectFolderPath([System.Runtime.CompilerServices.CallerFilePath] string filePath = );
        public static string GetRelativeFolderPath(string baseFolderPath, string filePath = );
    }

    [UnityEditor.CustomEditor(typeof(Unity.Formats.USD.UsdAsset))] public class UsdAssetEditor : UnityEditor.Editor
    {
        public UsdAssetEditor() {}
        public void OnEnable();
        public virtual void OnInspectorGUI();
    }

    public class UsdBuildPostProcess
    {
        public UsdBuildPostProcess() {}
        [UnityEditor.Callbacks.PostProcessBuild(1)] public static void OnPostprocessBuild(UnityEditor.BuildTarget target, string pathToBuiltProject);
    }

    [UnityEditor.CustomEditor(typeof(Unity.Formats.USD.UsdLayerStack))] public class UsdLayerStackEditor : UnityEditor.AssetImporters.ScriptedImporterEditor
    {
        public UsdLayerStackEditor() {}
        public virtual void OnInspectorGUI();
    }

    public static class UsdMenu
    {
        [UnityEditor.MenuItem(@"USD/Export Transform Overrides", priority = 50)] public static void MenuExportTransforms();
        [UnityEditor.MenuItem(@"USD/Import as GameObjects", priority = 0)] public static void MenuImportAsGameObjects();
        [UnityEditor.MenuItem(@"USD/Import as Prefab", priority = 1)] public static void MenuImportAsPrefab();
        [UnityEditor.MenuItem(@"USD/Import as Timeline Clip", priority = 2)] public static void MenuImportAsTimelineClip();
        [UnityEditor.MenuItem(@"USD/Load Subtree", priority = 101)] public static void MenuLoadSubtree();
        [UnityEditor.MenuItem(@"USD/Unload Subtree", priority = 100)] public static void MenuUnloadSubtree();
    }

    [UnityEditor.CustomEditor(typeof(Unity.Formats.USD.UsdPrimSource))] public class UsdPrimSourceEditor : UnityEditor.Editor
    {
        public UsdPrimSourceEditor() {}
        public virtual void OnInspectorGUI();
    }

    [UnityEditor.CustomEditor(typeof(Unity.Formats.USD.UsdVariantSet))] public class UsdVariantSetEditor : UnityEditor.Editor
    {
        public UsdVariantSetEditor() {}
        public virtual void OnInspectorGUI();
    }
}

namespace UnityEditor.Formats.USD.Recorder
{
    public class UsdRecorder : UnityEditor.Recorder.GenericRecorder<UnityEditor.Formats.USD.Recorder.UsdRecorderSettings>
    {
        public UsdRecorder() {}
        protected virtual void EndRecording(UnityEditor.Recorder.RecordingSession session);
        protected virtual void RecordFrame(UnityEditor.Recorder.RecordingSession ctx);
        protected virtual void SessionCreated(UnityEditor.Recorder.RecordingSession session);
    }

    public class UsdRecorderInput : UnityEditor.Recorder.RecorderInput
    {
        public UsdRecorderInput() {}
        protected virtual void BeginRecording(UnityEditor.Recorder.RecordingSession session);
        protected virtual void NewFrameReady(UnityEditor.Recorder.RecordingSession session);
    }

    public class UsdRecorderInputSettings : UnityEditor.Recorder.RecorderInputSettings
    {
        public UnityEngine.GameObject GameObject { get; set; }
        protected virtual System.Type InputType { get; }
        public UsdRecorderInputSettings() {}
        protected virtual bool ValidityCheck(System.Collections.Generic.List<string> errors);
    }

    [UnityEditor.Recorder.RecorderSettings(typeof(UnityEditor.Formats.USD.Recorder.UsdRecorder), @"USD Clip", @"usd_recorder")] public class UsdRecorderSettings : UnityEditor.Recorder.RecorderSettings
    {
        public Unity.Formats.USD.ActiveExportPolicy ActivePolicy { get; set; }
        public Unity.Formats.USD.BasisTransformation BasisTransformation { get; set; }
        public UnityEditor.Formats.USD.Recorder.UsdRecorderSettings.Format ExportFormat { get; }
        public bool ExportMaterials { get; set; }
        protected virtual string Extension { get; }
        public virtual System.Collections.Generic.IEnumerable<UnityEditor.Recorder.RecorderInputSettings> InputsSettings { get; }
        public pxr.UsdInterpolationType InterpolationType { get; set; }
        public float Scale { get; set; }
        public UsdRecorderSettings() {}
        public enum Format
        {
            public const UnityEditor.Formats.USD.Recorder.UsdRecorderSettings.Format USD = 0;
            public const UnityEditor.Formats.USD.Recorder.UsdRecorderSettings.Format USDA = 1;
            public const UnityEditor.Formats.USD.Recorder.UsdRecorderSettings.Format USDZ = 2;
            public int value__;
        }
    }

    [UnityEditor.CustomEditor(typeof(UnityEditor.Formats.USD.Recorder.UsdRecorderSettings))] public class UsdRecorderSettingsEditor : UnityEditor.Recorder.RecorderEditor
    {
        public UsdRecorderSettingsEditor() {}
        protected virtual void FileTypeAndFormatGUI();
    }
}
