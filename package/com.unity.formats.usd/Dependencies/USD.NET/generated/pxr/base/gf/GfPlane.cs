//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class GfPlane : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal GfPlane(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfPlane obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~GfPlane()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_GfPlane(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public GfPlane() : this(UsdCsPINVOKE.new_GfPlane__SWIG_0(), true)
        {
        }

        public GfPlane(GfVec3d normal, double distanceToOrigin) : this(UsdCsPINVOKE.new_GfPlane__SWIG_1(GfVec3d.getCPtr(normal), distanceToOrigin), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfPlane(GfVec3d normal, GfVec3d point) : this(UsdCsPINVOKE.new_GfPlane__SWIG_2(GfVec3d.getCPtr(normal), GfVec3d.getCPtr(point)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfPlane(GfVec3d p0, GfVec3d p1, GfVec3d p2) : this(UsdCsPINVOKE.new_GfPlane__SWIG_3(GfVec3d.getCPtr(p0), GfVec3d.getCPtr(p1), GfVec3d.getCPtr(p2)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfPlane(GfVec4d eqn) : this(UsdCsPINVOKE.new_GfPlane__SWIG_4(GfVec4d.getCPtr(eqn)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Set(GfVec3d normal, double distanceToOrigin)
        {
            UsdCsPINVOKE.GfPlane_Set__SWIG_0(swigCPtr, GfVec3d.getCPtr(normal), distanceToOrigin);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Set(GfVec3d normal, GfVec3d point)
        {
            UsdCsPINVOKE.GfPlane_Set__SWIG_1(swigCPtr, GfVec3d.getCPtr(normal), GfVec3d.getCPtr(point));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Set(GfVec3d p0, GfVec3d p1, GfVec3d p2)
        {
            UsdCsPINVOKE.GfPlane_Set__SWIG_2(swigCPtr, GfVec3d.getCPtr(p0), GfVec3d.getCPtr(p1), GfVec3d.getCPtr(p2));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Set(GfVec4d eqn)
        {
            UsdCsPINVOKE.GfPlane_Set__SWIG_3(swigCPtr, GfVec4d.getCPtr(eqn));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfVec3d GetNormal()
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfPlane_GetNormal(swigCPtr), false);
            return ret;
        }

        public double GetDistanceFromOrigin()
        {
            double ret = UsdCsPINVOKE.GfPlane_GetDistanceFromOrigin(swigCPtr);
            return ret;
        }

        public GfVec4d GetEquation()
        {
            GfVec4d ret = new GfVec4d(UsdCsPINVOKE.GfPlane_GetEquation(swigCPtr), true);
            return ret;
        }

        public double GetDistance(GfVec3d p)
        {
            double ret = UsdCsPINVOKE.GfPlane_GetDistance(swigCPtr, GfVec3d.getCPtr(p));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3d Project(GfVec3d p)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfPlane_Project(swigCPtr, GfVec3d.getCPtr(p)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfPlane Transform(GfMatrix4d matrix)
        {
            GfPlane ret = new GfPlane(UsdCsPINVOKE.GfPlane_Transform(swigCPtr, GfMatrix4d.getCPtr(matrix)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void Reorient(GfVec3d p)
        {
            UsdCsPINVOKE.GfPlane_Reorient(swigCPtr, GfVec3d.getCPtr(p));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool IntersectsPositiveHalfSpace(GfRange3d box)
        {
            bool ret = UsdCsPINVOKE.GfPlane_IntersectsPositiveHalfSpace__SWIG_0(swigCPtr, GfRange3d.getCPtr(box));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IntersectsPositiveHalfSpace(GfVec3d pt)
        {
            bool ret = UsdCsPINVOKE.GfPlane_IntersectsPositiveHalfSpace__SWIG_1(swigCPtr, GfVec3d.getCPtr(pt));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool Equals(GfPlane lhs, GfPlane rhs)
        {
            bool ret = UsdCsPINVOKE.GfPlane_Equals(GfPlane.getCPtr(lhs), GfPlane.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        override public int GetHashCode()
        {
            int ret = UsdCsPINVOKE.GfPlane_GetHashCode(swigCPtr);
            return ret;
        }

        public static bool operator==(GfPlane lhs, GfPlane rhs)
        {
            // The Swig binding glue will re-enter this operator comparing to null, so
            // that case must be handled explicitly to avoid an infinite loop. This is still
            // not great, since it crosses the C#/C++ barrier twice. A better approache might
            // be to return a simple value from C++ that can be compared in C#.
            bool lnull = lhs as object == null;
            bool rnull = rhs as object == null;
            return (lnull == rnull) && ((lnull && rnull) || GfPlane.Equals(lhs, rhs));
        }

        public static bool operator!=(GfPlane lhs, GfPlane rhs)
        {
            return !(lhs == rhs);
        }

        override public bool Equals(object rhs)
        {
            return GfPlane.Equals(this, rhs as GfPlane);
        }
    }
}
