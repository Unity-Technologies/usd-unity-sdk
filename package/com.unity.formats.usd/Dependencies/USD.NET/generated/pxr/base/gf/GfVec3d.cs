//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class GfVec3d : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal GfVec3d(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfVec3d obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~GfVec3d()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_GfVec3d(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public GfVec3d() : this(UsdCsPINVOKE.new_GfVec3d__SWIG_0(), true)
        {
        }

        public GfVec3d(double value) : this(UsdCsPINVOKE.new_GfVec3d__SWIG_1(value), true)
        {
        }

        public GfVec3d(double s0, double s1, double s2) : this(UsdCsPINVOKE.new_GfVec3d__SWIG_2(s0, s1, s2), true)
        {
        }

        public GfVec3d(GfVec3f other) : this(UsdCsPINVOKE.new_GfVec3d__SWIG_4(GfVec3f.getCPtr(other)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfVec3d(GfVec3h other) : this(UsdCsPINVOKE.new_GfVec3d__SWIG_5(GfVec3h.getCPtr(other)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfVec3d(GfVec3i other) : this(UsdCsPINVOKE.new_GfVec3d__SWIG_6(GfVec3i.getCPtr(other)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public static GfVec3d XAxis()
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_XAxis(), true);
            return ret;
        }

        public static GfVec3d YAxis()
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_YAxis(), true);
            return ret;
        }

        public static GfVec3d ZAxis()
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_ZAxis(), true);
            return ret;
        }

        public static GfVec3d Axis(uint i)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_Axis(i), true);
            return ret;
        }

        public GfVec3d Set(double s0, double s1, double s2)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_Set(swigCPtr, s0, s1, s2), false);
            return ret;
        }

        public GfVec3d GetProjection(GfVec3d v)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_GetProjection(swigCPtr, GfVec3d.getCPtr(v)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3d GetComplement(GfVec3d b)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_GetComplement(swigCPtr, GfVec3d.getCPtr(b)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public double GetLengthSq()
        {
            double ret = UsdCsPINVOKE.GfVec3d_GetLengthSq(swigCPtr);
            return ret;
        }

        public double GetLength()
        {
            double ret = UsdCsPINVOKE.GfVec3d_GetLength(swigCPtr);
            return ret;
        }

        public double Normalize(double eps)
        {
            double ret = UsdCsPINVOKE.GfVec3d_Normalize__SWIG_0(swigCPtr, eps);
            return ret;
        }

        public double Normalize()
        {
            double ret = UsdCsPINVOKE.GfVec3d_Normalize__SWIG_1(swigCPtr);
            return ret;
        }

        public GfVec3d GetNormalized(double eps)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_GetNormalized__SWIG_0(swigCPtr, eps), true);
            return ret;
        }

        public GfVec3d GetNormalized()
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfVec3d_GetNormalized__SWIG_1(swigCPtr), true);
            return ret;
        }

        public static bool OrthogonalizeBasis(GfVec3d tx, GfVec3d ty, GfVec3d tz, bool normalize, double eps)
        {
            bool ret = UsdCsPINVOKE.GfVec3d_OrthogonalizeBasis__SWIG_0(GfVec3d.getCPtr(tx), GfVec3d.getCPtr(ty), GfVec3d.getCPtr(tz), normalize, eps);
            return ret;
        }

        public static bool OrthogonalizeBasis(GfVec3d tx, GfVec3d ty, GfVec3d tz, bool normalize)
        {
            bool ret = UsdCsPINVOKE.GfVec3d_OrthogonalizeBasis__SWIG_1(GfVec3d.getCPtr(tx), GfVec3d.getCPtr(ty), GfVec3d.getCPtr(tz), normalize);
            return ret;
        }

        public void BuildOrthonormalFrame(GfVec3d v1, GfVec3d v2, double eps)
        {
            UsdCsPINVOKE.GfVec3d_BuildOrthonormalFrame__SWIG_0(swigCPtr, GfVec3d.getCPtr(v1), GfVec3d.getCPtr(v2), eps);
        }

        public void BuildOrthonormalFrame(GfVec3d v1, GfVec3d v2)
        {
            UsdCsPINVOKE.GfVec3d_BuildOrthonormalFrame__SWIG_1(swigCPtr, GfVec3d.getCPtr(v1), GfVec3d.getCPtr(v2));
        }

        public static bool Equals(GfVec3d lhs, GfVec3d rhs)
        {
            bool ret = UsdCsPINVOKE.GfVec3d_Equals(GfVec3d.getCPtr(lhs), GfVec3d.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        override public int GetHashCode()
        {
            int ret = UsdCsPINVOKE.GfVec3d_GetHashCode(swigCPtr);
            return ret;
        }

        public static bool operator==(GfVec3d lhs, GfVec3d rhs)
        {
            // The Swig binding glue will re-enter this operator comparing to null, so
            // that case must be handled explicitly to avoid an infinite loop. This is still
            // not great, since it crosses the C#/C++ barrier twice. A better approache might
            // be to return a simple value from C++ that can be compared in C#.
            bool lnull = lhs as object == null;
            bool rnull = rhs as object == null;
            return (lnull == rnull) && ((lnull && rnull) || GfVec3d.Equals(lhs, rhs));
        }

        public static bool operator!=(GfVec3d lhs, GfVec3d rhs)
        {
            return !(lhs == rhs);
        }

        override public bool Equals(object rhs)
        {
            return GfVec3d.Equals(this, rhs as GfVec3d);
        }

        protected double GetValue(int index)
        {
            double ret = UsdCsPINVOKE.GfVec3d_GetValue(swigCPtr, index);
            return ret;
        }

        protected void SetValue(int index, double value)
        {
            UsdCsPINVOKE.GfVec3d_SetValue(swigCPtr, index, value);
        }

        public double this[int index]
        {
            get { return GetValue(index); }
            set { SetValue(index, value); }
        }

        public static readonly uint dimension = UsdCsPINVOKE.GfVec3d_dimension_get();
    }
}
