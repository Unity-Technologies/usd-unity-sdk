//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class GfMatrix4f : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal GfMatrix4f(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfMatrix4f obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~GfMatrix4f()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_GfMatrix4f(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public GfMatrix4f() : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_0(), true)
        {
        }

        public GfMatrix4f(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_1(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33), true)
        {
        }

        public GfMatrix4f(float s) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_2(s), true)
        {
        }

        public GfMatrix4f(GfVec4f v) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_3(GfVec4f.getCPtr(v)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfMatrix4f(StdDoubleVectorVector v) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_4(StdDoubleVectorVector.getCPtr(v)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfMatrix4f(StdFloatVectorVector v) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_5(StdFloatVectorVector.getCPtr(v)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfMatrix4f(StdDoubleVector r0, StdDoubleVector r1, StdDoubleVector r2, StdDoubleVector r3) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_6(StdDoubleVector.getCPtr(r0), StdDoubleVector.getCPtr(r1), StdDoubleVector.getCPtr(r2), StdDoubleVector.getCPtr(r3)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfMatrix4f(StdFloatVector r0, StdFloatVector r1, StdFloatVector r2, StdFloatVector r3) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_7(StdFloatVector.getCPtr(r0), StdFloatVector.getCPtr(r1), StdFloatVector.getCPtr(r2), StdFloatVector.getCPtr(r3)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfMatrix4f(GfRotation rotate, GfVec3f translate) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_8(GfRotation.getCPtr(rotate), GfVec3f.getCPtr(translate)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfMatrix4f(GfMatrix4d m) : this(UsdCsPINVOKE.new_GfMatrix4f__SWIG_9(GfMatrix4d.getCPtr(m)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetRow(int i, GfVec4f v)
        {
            UsdCsPINVOKE.GfMatrix4f_SetRow(swigCPtr, i, GfVec4f.getCPtr(v));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetColumn(int i, GfVec4f v)
        {
            UsdCsPINVOKE.GfMatrix4f_SetColumn(swigCPtr, i, GfVec4f.getCPtr(v));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfVec4f GetRow(int i)
        {
            GfVec4f ret = new GfVec4f(UsdCsPINVOKE.GfMatrix4f_GetRow(swigCPtr, i), true);
            return ret;
        }

        public GfVec4f GetColumn(int i)
        {
            GfVec4f ret = new GfVec4f(UsdCsPINVOKE.GfMatrix4f_GetColumn(swigCPtr, i), true);
            return ret;
        }

        public GfMatrix4f Set(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_Set(swigCPtr, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33), false);
            return ret;
        }

        public GfMatrix4f SetIdentity()
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetIdentity(swigCPtr), false);
            return ret;
        }

        public GfMatrix4f SetZero()
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetZero(swigCPtr), false);
            return ret;
        }

        public GfMatrix4f SetDiagonal(float s)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetDiagonal__SWIG_0(swigCPtr, s), false);
            return ret;
        }

        public GfMatrix4f SetDiagonal(GfVec4f arg0)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetDiagonal__SWIG_1(swigCPtr, GfVec4f.getCPtr(arg0)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_float Get(SWIGTYPE_p_a_4__float m)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.GfMatrix4f_Get(swigCPtr, SWIGTYPE_p_a_4__float.getCPtr(m));
            SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
            return ret;
        }

        public SWIGTYPE_p_float data()
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.GfMatrix4f_data__SWIG_0(swigCPtr);
            SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
            return ret;
        }

        public GfMatrix4f GetTranspose()
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_GetTranspose(swigCPtr), true);
            return ret;
        }

        public GfMatrix4f GetInverse(ref double det, double eps)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_GetInverse__SWIG_0(swigCPtr, ref det, eps), true);
            return ret;
        }

        public GfMatrix4f GetInverse(ref double det)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_GetInverse__SWIG_1(swigCPtr, ref det), true);
            return ret;
        }

        public GfMatrix4f GetInverse()
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_GetInverse__SWIG_2(swigCPtr), true);
            return ret;
        }

        public double GetDeterminant()
        {
            double ret = UsdCsPINVOKE.GfMatrix4f_GetDeterminant(swigCPtr);
            return ret;
        }

        public void SetRow3(int i, GfVec3f v)
        {
            UsdCsPINVOKE.GfMatrix4f_SetRow3(swigCPtr, i, GfVec3f.getCPtr(v));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfVec3f GetRow3(int i)
        {
            GfVec3f ret = new GfVec3f(UsdCsPINVOKE.GfMatrix4f_GetRow3(swigCPtr, i), true);
            return ret;
        }

        public double GetDeterminant3()
        {
            double ret = UsdCsPINVOKE.GfMatrix4f_GetDeterminant3(swigCPtr);
            return ret;
        }

        public bool HasOrthogonalRows3()
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_HasOrthogonalRows3(swigCPtr);
            return ret;
        }

        public bool Orthonormalize(bool issueWarning)
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_Orthonormalize__SWIG_0(swigCPtr, issueWarning);
            return ret;
        }

        public bool Orthonormalize()
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_Orthonormalize__SWIG_1(swigCPtr);
            return ret;
        }

        public GfMatrix4f GetOrthonormalized(bool issueWarning)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_GetOrthonormalized__SWIG_0(swigCPtr, issueWarning), true);
            return ret;
        }

        public GfMatrix4f GetOrthonormalized()
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_GetOrthonormalized__SWIG_1(swigCPtr), true);
            return ret;
        }

        public double GetHandedness()
        {
            double ret = UsdCsPINVOKE.GfMatrix4f_GetHandedness(swigCPtr);
            return ret;
        }

        public bool IsRightHanded()
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_IsRightHanded(swigCPtr);
            return ret;
        }

        public bool IsLeftHanded()
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_IsLeftHanded(swigCPtr);
            return ret;
        }

        public GfMatrix4f SetScale(float scaleFactor)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetScale__SWIG_0(swigCPtr, scaleFactor), false);
            return ret;
        }

        public GfMatrix4f SetRotate(GfQuatf rot)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetRotate__SWIG_0(swigCPtr, GfQuatf.getCPtr(rot)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetRotateOnly(GfQuatf rot)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetRotateOnly__SWIG_0(swigCPtr, GfQuatf.getCPtr(rot)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetRotate(GfRotation rot)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetRotate__SWIG_1(swigCPtr, GfRotation.getCPtr(rot)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetRotateOnly(GfRotation rot)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetRotateOnly__SWIG_1(swigCPtr, GfRotation.getCPtr(rot)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetRotate(GfMatrix3f mx)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetRotate__SWIG_2(swigCPtr, GfMatrix3f.getCPtr(mx)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetRotateOnly(GfMatrix3f mx)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetRotateOnly__SWIG_2(swigCPtr, GfMatrix3f.getCPtr(mx)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetScale(GfVec3f scaleFactors)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetScale__SWIG_1(swigCPtr, GfVec3f.getCPtr(scaleFactors)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetTranslate(GfVec3f trans)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetTranslate(swigCPtr, GfVec3f.getCPtr(trans)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetTranslateOnly(GfVec3f t)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetTranslateOnly(swigCPtr, GfVec3f.getCPtr(t)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetTransform(GfRotation rotate, GfVec3f translate)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetTransform__SWIG_0(swigCPtr, GfRotation.getCPtr(rotate), GfVec3f.getCPtr(translate)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetTransform(GfMatrix3f rotmx, GfVec3f translate)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetTransform__SWIG_1(swigCPtr, GfMatrix3f.getCPtr(rotmx), GfVec3f.getCPtr(translate)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetLookAt(GfVec3f eyePoint, GfVec3f centerPoint, GfVec3f upDirection)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetLookAt__SWIG_0(swigCPtr, GfVec3f.getCPtr(eyePoint), GfVec3f.getCPtr(centerPoint), GfVec3f.getCPtr(upDirection)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4f SetLookAt(GfVec3f eyePoint, GfRotation orientation)
        {
            GfMatrix4f ret = new GfMatrix4f(UsdCsPINVOKE.GfMatrix4f_SetLookAt__SWIG_1(swigCPtr, GfVec3f.getCPtr(eyePoint), GfRotation.getCPtr(orientation)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Factor(GfMatrix4f r, GfVec3f s, GfMatrix4f u, GfVec3f t, GfMatrix4f p, float eps)
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_Factor__SWIG_0(swigCPtr, GfMatrix4f.getCPtr(r), GfVec3f.getCPtr(s), GfMatrix4f.getCPtr(u), GfVec3f.getCPtr(t), GfMatrix4f.getCPtr(p), eps);
            return ret;
        }

        public bool Factor(GfMatrix4f r, GfVec3f s, GfMatrix4f u, GfVec3f t, GfMatrix4f p)
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_Factor__SWIG_1(swigCPtr, GfMatrix4f.getCPtr(r), GfVec3f.getCPtr(s), GfMatrix4f.getCPtr(u), GfVec3f.getCPtr(t), GfMatrix4f.getCPtr(p));
            return ret;
        }

        public GfVec3f ExtractTranslation()
        {
            GfVec3f ret = new GfVec3f(UsdCsPINVOKE.GfMatrix4f_ExtractTranslation(swigCPtr), true);
            return ret;
        }

        public GfRotation ExtractRotation()
        {
            GfRotation ret = new GfRotation(UsdCsPINVOKE.GfMatrix4f_ExtractRotation(swigCPtr), true);
            return ret;
        }

        public GfQuatf ExtractRotationQuat()
        {
            GfQuatf ret = new GfQuatf(UsdCsPINVOKE.GfMatrix4f_ExtractRotationQuat(swigCPtr), true);
            return ret;
        }

        public GfVec3f DecomposeRotation(GfVec3f axis0, GfVec3f axis1, GfVec3f axis2)
        {
            GfVec3f ret = new GfVec3f(UsdCsPINVOKE.GfMatrix4f_DecomposeRotation(swigCPtr, GfVec3f.getCPtr(axis0), GfVec3f.getCPtr(axis1), GfVec3f.getCPtr(axis2)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix3f ExtractRotationMatrix()
        {
            GfMatrix3f ret = new GfMatrix3f(UsdCsPINVOKE.GfMatrix4f_ExtractRotationMatrix(swigCPtr), true);
            return ret;
        }

        public GfVec3d Transform(GfVec3d vec)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfMatrix4f_Transform__SWIG_0(swigCPtr, GfVec3d.getCPtr(vec)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3f Transform(GfVec3f vec)
        {
            GfVec3f ret = new GfVec3f(UsdCsPINVOKE.GfMatrix4f_Transform__SWIG_1(swigCPtr, GfVec3f.getCPtr(vec)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3d TransformDir(GfVec3d vec)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfMatrix4f_TransformDir__SWIG_0(swigCPtr, GfVec3d.getCPtr(vec)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3f TransformDir(GfVec3f vec)
        {
            GfVec3f ret = new GfVec3f(UsdCsPINVOKE.GfMatrix4f_TransformDir__SWIG_1(swigCPtr, GfVec3f.getCPtr(vec)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3d TransformAffine(GfVec3d vec)
        {
            GfVec3d ret = new GfVec3d(UsdCsPINVOKE.GfMatrix4f_TransformAffine__SWIG_0(swigCPtr, GfVec3d.getCPtr(vec)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfVec3f TransformAffine(GfVec3f vec)
        {
            GfVec3f ret = new GfVec3f(UsdCsPINVOKE.GfMatrix4f_TransformAffine__SWIG_1(swigCPtr, GfVec3f.getCPtr(vec)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool Equals(GfMatrix4f lhs, GfMatrix4f rhs)
        {
            bool ret = UsdCsPINVOKE.GfMatrix4f_Equals(GfMatrix4f.getCPtr(lhs), GfMatrix4f.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        override public int GetHashCode()
        {
            int ret = UsdCsPINVOKE.GfMatrix4f_GetHashCode(swigCPtr);
            return ret;
        }

        public static bool operator==(GfMatrix4f lhs, GfMatrix4f rhs)
        {
            // The Swig binding glue will re-enter this operator comparing to null, so
            // that case must be handled explicitly to avoid an infinite loop. This is still
            // not great, since it crosses the C#/C++ barrier twice. A better approache might
            // be to return a simple value from C++ that can be compared in C#.
            bool lnull = lhs as object == null;
            bool rnull = rhs as object == null;
            return (lnull == rnull) && ((lnull && rnull) || GfMatrix4f.Equals(lhs, rhs));
        }

        public static bool operator!=(GfMatrix4f lhs, GfMatrix4f rhs)
        {
            return !(lhs == rhs);
        }

        override public bool Equals(object rhs)
        {
            return GfMatrix4f.Equals(this, rhs as GfMatrix4f);
        }

        public override string ToString()
        {
            string ret = UsdCsPINVOKE.GfMatrix4f_ToString(swigCPtr);
            return ret;
        }

        public void CopyToArray(float[] dest)
        {
            UsdCsPINVOKE.GfMatrix4f_CopyToArray(swigCPtr, dest);
        }

        public void CopyFromArray(float[] src)
        {
            UsdCsPINVOKE.GfMatrix4f_CopyFromArray(swigCPtr, src);
        }

        public static readonly uint numRows = UsdCsPINVOKE.GfMatrix4f_numRows_get();
        public static readonly uint numColumns = UsdCsPINVOKE.GfMatrix4f_numColumns_get();
    }
}
