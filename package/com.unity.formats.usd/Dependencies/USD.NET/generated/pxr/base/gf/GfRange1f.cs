//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class GfRange1f : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal GfRange1f(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GfRange1f obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~GfRange1f()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_GfRange1f(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public void SetEmpty()
        {
            UsdCsPINVOKE.GfRange1f_SetEmpty(swigCPtr);
        }

        public GfRange1f() : this(UsdCsPINVOKE.new_GfRange1f__SWIG_0(), true)
        {
        }

        public GfRange1f(float min, float max) : this(UsdCsPINVOKE.new_GfRange1f__SWIG_1(min, max), true)
        {
        }

        public float GetMin()
        {
            float ret = UsdCsPINVOKE.GfRange1f_GetMin(swigCPtr);
            return ret;
        }

        public float GetMax()
        {
            float ret = UsdCsPINVOKE.GfRange1f_GetMax(swigCPtr);
            return ret;
        }

        public float GetSize()
        {
            float ret = UsdCsPINVOKE.GfRange1f_GetSize(swigCPtr);
            return ret;
        }

        public float GetMidpoint()
        {
            float ret = UsdCsPINVOKE.GfRange1f_GetMidpoint(swigCPtr);
            return ret;
        }

        public void SetMin(float min)
        {
            UsdCsPINVOKE.GfRange1f_SetMin(swigCPtr, min);
        }

        public void SetMax(float max)
        {
            UsdCsPINVOKE.GfRange1f_SetMax(swigCPtr, max);
        }

        public bool IsEmpty()
        {
            bool ret = UsdCsPINVOKE.GfRange1f_IsEmpty(swigCPtr);
            return ret;
        }

        public void ExtendBy(float point)
        {
            UsdCsPINVOKE.GfRange1f_ExtendBy__SWIG_0(swigCPtr, point);
        }

        public void ExtendBy(GfRange1f range)
        {
            UsdCsPINVOKE.GfRange1f_ExtendBy__SWIG_1(swigCPtr, GfRange1f.getCPtr(range));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool Contains(float point)
        {
            bool ret = UsdCsPINVOKE.GfRange1f_Contains__SWIG_0(swigCPtr, point);
            return ret;
        }

        public bool Contains(GfRange1f range)
        {
            bool ret = UsdCsPINVOKE.GfRange1f_Contains__SWIG_1(swigCPtr, GfRange1f.getCPtr(range));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsInside(float point)
        {
            bool ret = UsdCsPINVOKE.GfRange1f_IsInside__SWIG_0(swigCPtr, point);
            return ret;
        }

        public bool IsInside(GfRange1f range)
        {
            bool ret = UsdCsPINVOKE.GfRange1f_IsInside__SWIG_1(swigCPtr, GfRange1f.getCPtr(range));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsOutside(GfRange1f range)
        {
            bool ret = UsdCsPINVOKE.GfRange1f_IsOutside(swigCPtr, GfRange1f.getCPtr(range));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static GfRange1f GetUnion(GfRange1f a, GfRange1f b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_GetUnion(GfRange1f.getCPtr(a), GfRange1f.getCPtr(b)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfRange1f UnionWith(GfRange1f b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_UnionWith__SWIG_0(swigCPtr, GfRange1f.getCPtr(b)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfRange1f UnionWith(float b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_UnionWith__SWIG_1(swigCPtr, b), false);
            return ret;
        }

        public static GfRange1f Union(GfRange1f a, GfRange1f b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_Union__SWIG_0(GfRange1f.getCPtr(a), GfRange1f.getCPtr(b)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfRange1f Union(float b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_Union__SWIG_2(swigCPtr, b), false);
            return ret;
        }

        public static GfRange1f GetIntersection(GfRange1f a, GfRange1f b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_GetIntersection(GfRange1f.getCPtr(a), GfRange1f.getCPtr(b)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static GfRange1f Intersection(GfRange1f a, GfRange1f b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_Intersection__SWIG_0(GfRange1f.getCPtr(a), GfRange1f.getCPtr(b)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfRange1f IntersectWith(GfRange1f b)
        {
            GfRange1f ret = new GfRange1f(UsdCsPINVOKE.GfRange1f_IntersectWith(swigCPtr, GfRange1f.getCPtr(b)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public double GetDistanceSquared(float p)
        {
            double ret = UsdCsPINVOKE.GfRange1f_GetDistanceSquared(swigCPtr, p);
            return ret;
        }

        public static bool Equals(GfRange1f lhs, GfRange1f rhs)
        {
            bool ret = UsdCsPINVOKE.GfRange1f_Equals(GfRange1f.getCPtr(lhs), GfRange1f.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        override public int GetHashCode()
        {
            int ret = UsdCsPINVOKE.GfRange1f_GetHashCode(swigCPtr);
            return ret;
        }

        public static bool operator==(GfRange1f lhs, GfRange1f rhs)
        {
            // The Swig binding glue will re-enter this operator comparing to null, so
            // that case must be handled explicitly to avoid an infinite loop. This is still
            // not great, since it crosses the C#/C++ barrier twice. A better approache might
            // be to return a simple value from C++ that can be compared in C#.
            bool lnull = lhs as object == null;
            bool rnull = rhs as object == null;
            return (lnull == rnull) && ((lnull && rnull) || GfRange1f.Equals(lhs, rhs));
        }

        public static bool operator!=(GfRange1f lhs, GfRange1f rhs)
        {
            return !(lhs == rhs);
        }

        override public bool Equals(object rhs)
        {
            return GfRange1f.Equals(this, rhs as GfRange1f);
        }

        public static readonly uint dimension = UsdCsPINVOKE.GfRange1f_dimension_get();
    }
}
