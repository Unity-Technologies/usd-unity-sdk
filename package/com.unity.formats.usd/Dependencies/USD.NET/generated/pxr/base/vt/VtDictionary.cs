//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class VtDictionary : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal VtDictionary(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VtDictionary obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~VtDictionary()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_VtDictionary(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public VtDictionary() : this(UsdCsPINVOKE.new_VtDictionary__SWIG_0(), true)
        {
        }

        public VtDictionary(int size) : this(UsdCsPINVOKE.new_VtDictionary__SWIG_1(size), true)
        {
        }

        public VtDictionary(VtDictionary other) : this(UsdCsPINVOKE.new_VtDictionary__SWIG_3(VtDictionary.getCPtr(other)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type count(string key)
        {
            SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type ret = new SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type(UsdCsPINVOKE.VtDictionary_count__SWIG_0(swigCPtr, key), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type erase(string key)
        {
            SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type ret = new SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type(UsdCsPINVOKE.VtDictionary_erase__SWIG_0(swigCPtr, key), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void erase(SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t it)
        {
            UsdCsPINVOKE.VtDictionary_erase__SWIG_1(swigCPtr, SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t.getCPtr(it));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void erase(SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t f, SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t l)
        {
            UsdCsPINVOKE.VtDictionary_erase__SWIG_2(swigCPtr, SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t.getCPtr(f), SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t.getCPtr(l));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void clear()
        {
            UsdCsPINVOKE.VtDictionary_clear(swigCPtr);
        }

        public SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t find(string key)
        {
            SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t ret = new SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t(UsdCsPINVOKE.VtDictionary_find__SWIG_0(swigCPtr, key), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t begin()
        {
            SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t ret = new SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t(UsdCsPINVOKE.VtDictionary_begin__SWIG_0(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t end()
        {
            SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t ret = new SWIGTYPE_p_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t(UsdCsPINVOKE.VtDictionary_end__SWIG_0(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type size()
        {
            SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type ret = new SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__size_type(UsdCsPINVOKE.VtDictionary_size(swigCPtr), true);
            return ret;
        }

        public bool empty()
        {
            bool ret = UsdCsPINVOKE.VtDictionary_empty(swigCPtr);
            return ret;
        }

        public void swap(VtDictionary dict)
        {
            UsdCsPINVOKE.VtDictionary_swap(swigCPtr, VtDictionary.getCPtr(dict));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_std__pairT_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t_bool_t insert(SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__value_type obj)
        {
            SWIGTYPE_p_std__pairT_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t_bool_t ret = new SWIGTYPE_p_std__pairT_VtDictionary__IteratorT_std__mapT_std__string_VtValue_std__lessT_t_t_p_std__mapT_std__string_VtValue_std__lessT_t_t__iterator_t_bool_t(UsdCsPINVOKE.VtDictionary_insert(swigCPtr, SWIGTYPE_p_std__mapT_std__string_VtValue_std__lessT_t_t__value_type.getCPtr(obj)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetValueAtPath(string keyPath, string delimiters)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.VtDictionary_GetValueAtPath__SWIG_0(swigCPtr, keyPath, delimiters);
            VtValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new VtValue(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetValueAtPath(string keyPath)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.VtDictionary_GetValueAtPath__SWIG_1(swigCPtr, keyPath);
            VtValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new VtValue(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetValueAtPath(StdStringVector keyPath)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.VtDictionary_GetValueAtPath__SWIG_2(swigCPtr, StdStringVector.getCPtr(keyPath));
            VtValue ret = (cPtr == global::System.IntPtr.Zero) ? null : new VtValue(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void SetValueAtPath(string keyPath, VtValue value, string delimiters)
        {
            UsdCsPINVOKE.VtDictionary_SetValueAtPath__SWIG_0(swigCPtr, keyPath, VtValue.getCPtr(value), delimiters);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetValueAtPath(string keyPath, VtValue value)
        {
            UsdCsPINVOKE.VtDictionary_SetValueAtPath__SWIG_1(swigCPtr, keyPath, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetValueAtPath(StdStringVector keyPath, VtValue value)
        {
            UsdCsPINVOKE.VtDictionary_SetValueAtPath__SWIG_2(swigCPtr, StdStringVector.getCPtr(keyPath), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void EraseValueAtPath(string keyPath, string delimiters)
        {
            UsdCsPINVOKE.VtDictionary_EraseValueAtPath__SWIG_0(swigCPtr, keyPath, delimiters);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void EraseValueAtPath(string keyPath)
        {
            UsdCsPINVOKE.VtDictionary_EraseValueAtPath__SWIG_1(swigCPtr, keyPath);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void EraseValueAtPath(StdStringVector keyPath)
        {
            UsdCsPINVOKE.VtDictionary_EraseValueAtPath__SWIG_2(swigCPtr, StdStringVector.getCPtr(keyPath));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }
    }
}
