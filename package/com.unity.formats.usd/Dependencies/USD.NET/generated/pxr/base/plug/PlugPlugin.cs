//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class PlugPlugin : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal PlugPlugin(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PlugPlugin obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~PlugPlugin()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_PlugPlugin(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public bool Load()
        {
            bool ret = UsdCsPINVOKE.PlugPlugin_Load(swigCPtr);
            return ret;
        }

        public bool IsLoaded()
        {
            bool ret = UsdCsPINVOKE.PlugPlugin_IsLoaded(swigCPtr);
            return ret;
        }

        public bool IsResource()
        {
            bool ret = UsdCsPINVOKE.PlugPlugin_IsResource(swigCPtr);
            return ret;
        }

        public JsObject GetMetadata()
        {
            JsObject ret = new JsObject(UsdCsPINVOKE.PlugPlugin_GetMetadata(swigCPtr), true);
            return ret;
        }

        public JsObject GetMetadataForType(TfType type)
        {
            JsObject ret = new JsObject(UsdCsPINVOKE.PlugPlugin_GetMetadataForType(swigCPtr, TfType.getCPtr(type)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public JsObject GetDependencies()
        {
            JsObject ret = new JsObject(UsdCsPINVOKE.PlugPlugin_GetDependencies(swigCPtr), true);
            return ret;
        }

        public bool DeclaresType(TfType type, bool includeSubclasses)
        {
            bool ret = UsdCsPINVOKE.PlugPlugin_DeclaresType__SWIG_0(swigCPtr, TfType.getCPtr(type), includeSubclasses);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool DeclaresType(TfType type)
        {
            bool ret = UsdCsPINVOKE.PlugPlugin_DeclaresType__SWIG_1(swigCPtr, TfType.getCPtr(type));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string GetName()
        {
            string ret = UsdCsPINVOKE.PlugPlugin_GetName(swigCPtr);
            return ret;
        }

        public string GetPath()
        {
            string ret = UsdCsPINVOKE.PlugPlugin_GetPath(swigCPtr);
            return ret;
        }

        public string GetResourcePath()
        {
            string ret = UsdCsPINVOKE.PlugPlugin_GetResourcePath(swigCPtr);
            return ret;
        }

        public string MakeResourcePath(string path)
        {
            string ret = UsdCsPINVOKE.PlugPlugin_MakeResourcePath(swigCPtr, path);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string FindPluginResource(string path, bool verify)
        {
            string ret = UsdCsPINVOKE.PlugPlugin_FindPluginResource__SWIG_0(swigCPtr, path, verify);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string FindPluginResource(string path)
        {
            string ret = UsdCsPINVOKE.PlugPlugin_FindPluginResource__SWIG_1(swigCPtr, path);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }
}
