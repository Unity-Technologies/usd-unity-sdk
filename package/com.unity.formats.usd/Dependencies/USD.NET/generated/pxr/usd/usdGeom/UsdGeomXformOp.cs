//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdGeomXformOp : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdGeomXformOp(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomXformOp obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdGeomXformOp()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdGeomXformOp(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdGeomXformOp() : this(UsdCsPINVOKE.new_UsdGeomXformOp__SWIG_0(), true)
        {
        }

        public UsdGeomXformOp(UsdAttribute attr, bool isInverseOp) : this(UsdCsPINVOKE.new_UsdGeomXformOp__SWIG_1(UsdAttribute.getCPtr(attr), isInverseOp), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdGeomXformOp(UsdAttribute attr) : this(UsdCsPINVOKE.new_UsdGeomXformOp__SWIG_2(UsdAttribute.getCPtr(attr)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public static bool IsXformOp(UsdAttribute attr)
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_IsXformOp__SWIG_0(UsdAttribute.getCPtr(attr));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool IsXformOp(TfToken attrName)
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_IsXformOp__SWIG_1(TfToken.getCPtr(attrName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static TfToken GetOpTypeToken(UsdGeomXformOp.Type opType)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetOpTypeToken((int)opType), false);
            return ret;
        }

        public static UsdGeomXformOp.Type GetOpTypeEnum(TfToken opTypeToken)
        {
            UsdGeomXformOp.Type ret = (UsdGeomXformOp.Type)UsdCsPINVOKE.UsdGeomXformOp_GetOpTypeEnum(TfToken.getCPtr(opTypeToken));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static UsdGeomXformOp.Precision GetPrecisionFromValueTypeName(SdfValueTypeName typeName)
        {
            UsdGeomXformOp.Precision ret = (UsdGeomXformOp.Precision)UsdCsPINVOKE.UsdGeomXformOp_GetPrecisionFromValueTypeName(SdfValueTypeName.getCPtr(typeName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfValueTypeName GetValueTypeName(UsdGeomXformOp.Type opType, UsdGeomXformOp.Precision precision)
        {
            SdfValueTypeName ret = new SdfValueTypeName(UsdCsPINVOKE.UsdGeomXformOp_GetValueTypeName((int)opType, (int)precision), false);
            return ret;
        }

        public static TfToken GetOpName(UsdGeomXformOp.Type opType, TfToken opSuffix, bool inverse)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetOpName__SWIG_0((int)opType, TfToken.getCPtr(opSuffix), inverse), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static TfToken GetOpName(UsdGeomXformOp.Type opType, TfToken opSuffix)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetOpName__SWIG_1((int)opType, TfToken.getCPtr(opSuffix)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static TfToken GetOpName(UsdGeomXformOp.Type opType)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetOpName__SWIG_2((int)opType), true);
            return ret;
        }

        public UsdGeomXformOp.Type GetOpType()
        {
            UsdGeomXformOp.Type ret = (UsdGeomXformOp.Type)UsdCsPINVOKE.UsdGeomXformOp_GetOpType(swigCPtr);
            return ret;
        }

        public UsdGeomXformOp.Precision GetPrecision()
        {
            UsdGeomXformOp.Precision ret = (UsdGeomXformOp.Precision)UsdCsPINVOKE.UsdGeomXformOp_GetPrecision(swigCPtr);
            return ret;
        }

        public bool IsInverseOp()
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_IsInverseOp(swigCPtr);
            return ret;
        }

        public TfToken GetOpName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetOpName__SWIG_3(swigCPtr), true);
            return ret;
        }

        public bool HasSuffix(TfToken suffix)
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_HasSuffix(swigCPtr, TfToken.getCPtr(suffix));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static GfMatrix4d GetOpTransform(UsdGeomXformOp.Type opType, VtValue opVal, bool isInverseOp)
        {
            GfMatrix4d ret = new GfMatrix4d(UsdCsPINVOKE.UsdGeomXformOp_GetOpTransform__SWIG_0((int)opType, VtValue.getCPtr(opVal), isInverseOp), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static GfMatrix4d GetOpTransform(UsdGeomXformOp.Type opType, VtValue opVal)
        {
            GfMatrix4d ret = new GfMatrix4d(UsdCsPINVOKE.UsdGeomXformOp_GetOpTransform__SWIG_1((int)opType, VtValue.getCPtr(opVal)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfMatrix4d GetOpTransform(UsdTimeCode time)
        {
            GfMatrix4d ret = new GfMatrix4d(UsdCsPINVOKE.UsdGeomXformOp_GetOpTransform__SWIG_2(swigCPtr, UsdTimeCode.getCPtr(time)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool MightBeTimeVarying()
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_MightBeTimeVarying(swigCPtr);
            return ret;
        }

        public UsdAttribute GetAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomXformOp_GetAttr(swigCPtr), false);
            return ret;
        }

        public bool IsDefined()
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_IsDefined(swigCPtr);
            return ret;
        }

        public TfToken GetName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetName(swigCPtr), false);
            return ret;
        }

        public TfToken GetBaseName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetBaseName(swigCPtr), true);
            return ret;
        }

        public TfToken GetNamespace()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomXformOp_GetNamespace(swigCPtr), true);
            return ret;
        }

        public StdStringVector SplitName()
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.UsdGeomXformOp_SplitName(swigCPtr), true);
            return ret;
        }

        public SdfValueTypeName GetTypeName()
        {
            SdfValueTypeName ret = new SdfValueTypeName(UsdCsPINVOKE.UsdGeomXformOp_GetTypeName(swigCPtr), true);
            return ret;
        }

        public bool GetTimeSamples(StdDoubleVector times)
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_GetTimeSamples(swigCPtr, StdDoubleVector.getCPtr(times));
            return ret;
        }

        public uint GetNumTimeSamples()
        {
            uint ret = UsdCsPINVOKE.UsdGeomXformOp_GetNumTimeSamples(swigCPtr);
            return ret;
        }

        public bool Set(GfMatrix4d value, UsdTimeCode time)
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_Set__SWIG_2(swigCPtr, GfMatrix4d.getCPtr(value), UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Set(GfMatrix4d value)
        {
            bool ret = UsdCsPINVOKE.UsdGeomXformOp_Set__SWIG_3(swigCPtr, GfMatrix4d.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public enum Type
        {
            TypeInvalid,
            TypeTranslate,
            TypeScale,
            TypeRotateX,
            TypeRotateY,
            TypeRotateZ,
            TypeRotateXYZ,
            TypeRotateXZY,
            TypeRotateYXZ,
            TypeRotateYZX,
            TypeRotateZXY,
            TypeRotateZYX,
            TypeOrient,
            TypeTransform
        }

        public enum Precision
        {
            PrecisionDouble,
            PrecisionFloat,
            PrecisionHalf
        }
    }
}
