//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdGeomBasisCurves : UsdGeomCurves
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal UsdGeomBasisCurves(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdGeomBasisCurves_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomBasisCurves obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdGeomBasisCurves()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdGeomBasisCurves(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public UsdGeomBasisCurves(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdGeomBasisCurves__SWIG_0(UsdPrim.getCPtr(prim)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdGeomBasisCurves() : this(UsdCsPINVOKE.new_UsdGeomBasisCurves__SWIG_1(), true)
        {
        }

        public UsdGeomBasisCurves(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdGeomBasisCurves__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdGeomBasisCurves_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
            return ret;
        }

        public new static TfTokenVector GetSchemaAttributeNames()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdGeomBasisCurves_GetSchemaAttributeNames__SWIG_1(), false);
            return ret;
        }

        public new static UsdGeomBasisCurves Get(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdGeomBasisCurves ret = new UsdGeomBasisCurves(UsdCsPINVOKE.UsdGeomBasisCurves_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static UsdGeomBasisCurves Define(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdGeomBasisCurves ret = new UsdGeomBasisCurves(UsdCsPINVOKE.UsdGeomBasisCurves_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute GetTypeAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_GetTypeAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateTypeAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateTypeAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateTypeAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateTypeAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateTypeAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateTypeAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public UsdAttribute GetBasisAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_GetBasisAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateBasisAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateBasisAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateBasisAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateBasisAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateBasisAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateBasisAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public UsdAttribute GetWrapAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_GetWrapAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateWrapAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateWrapAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateWrapAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateWrapAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateWrapAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdGeomBasisCurves_CreateWrapAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public TfToken ComputeInterpolationForSize(uint n, UsdTimeCode timeCode, UsdGeomBasisCurvesComputeInterpolationInfo info)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomBasisCurves_ComputeInterpolationForSize__SWIG_0(swigCPtr, n, UsdTimeCode.getCPtr(timeCode), UsdGeomBasisCurvesComputeInterpolationInfo.getCPtr(info)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfToken ComputeInterpolationForSize(uint n, UsdTimeCode timeCode)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdGeomBasisCurves_ComputeInterpolationForSize__SWIG_1(swigCPtr, n, UsdTimeCode.getCPtr(timeCode)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint ComputeUniformDataSize(UsdTimeCode timeCode)
        {
            uint ret = UsdCsPINVOKE.UsdGeomBasisCurves_ComputeUniformDataSize(swigCPtr, UsdTimeCode.getCPtr(timeCode));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint ComputeVaryingDataSize(UsdTimeCode timeCode)
        {
            uint ret = UsdCsPINVOKE.UsdGeomBasisCurves_ComputeVaryingDataSize(swigCPtr, UsdTimeCode.getCPtr(timeCode));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint ComputeVertexDataSize(UsdTimeCode timeCode)
        {
            uint ret = UsdCsPINVOKE.UsdGeomBasisCurves_ComputeVertexDataSize(swigCPtr, UsdTimeCode.getCPtr(timeCode));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }
}
