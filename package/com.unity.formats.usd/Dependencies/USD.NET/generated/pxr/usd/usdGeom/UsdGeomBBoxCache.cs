//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdGeomBBoxCache : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdGeomBBoxCache(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdGeomBBoxCache obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdGeomBBoxCache()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdGeomBBoxCache(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdGeomBBoxCache(UsdTimeCode time, TfTokenVector includedPurposes, bool useExtentsHint, bool ignoreVisibility) : this(UsdCsPINVOKE.new_UsdGeomBBoxCache__SWIG_0(UsdTimeCode.getCPtr(time), TfTokenVector.getCPtr(includedPurposes), useExtentsHint, ignoreVisibility), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdGeomBBoxCache(UsdTimeCode time, TfTokenVector includedPurposes, bool useExtentsHint) : this(UsdCsPINVOKE.new_UsdGeomBBoxCache__SWIG_1(UsdTimeCode.getCPtr(time), TfTokenVector.getCPtr(includedPurposes), useExtentsHint), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdGeomBBoxCache(UsdTimeCode time, TfTokenVector includedPurposes) : this(UsdCsPINVOKE.new_UsdGeomBBoxCache__SWIG_2(UsdTimeCode.getCPtr(time), TfTokenVector.getCPtr(includedPurposes)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdGeomBBoxCache(UsdGeomBBoxCache other) : this(UsdCsPINVOKE.new_UsdGeomBBoxCache__SWIG_3(UsdGeomBBoxCache.getCPtr(other)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public GfBBox3d ComputeWorldBound(UsdPrim prim)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputeWorldBound(swigCPtr, UsdPrim.getCPtr(prim)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputeRelativeBound(UsdPrim prim, UsdPrim relativeToAncestorPrim)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputeRelativeBound(swigCPtr, UsdPrim.getCPtr(prim), UsdPrim.getCPtr(relativeToAncestorPrim)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputeLocalBound(UsdPrim prim)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputeLocalBound(swigCPtr, UsdPrim.getCPtr(prim)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputeUntransformedBound(UsdPrim prim)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputeUntransformedBound__SWIG_0(swigCPtr, UsdPrim.getCPtr(prim)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputeUntransformedBound(UsdPrim prim, SWIGTYPE_p_std__setT_SdfPath_t pathsToSkip, SWIGTYPE_p_TfHashMapT_SdfPath_GfMatrix4d_SdfPath__Hash_t ctmOverrides)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputeUntransformedBound__SWIG_1(swigCPtr, UsdPrim.getCPtr(prim), SWIGTYPE_p_std__setT_SdfPath_t.getCPtr(pathsToSkip), SWIGTYPE_p_TfHashMapT_SdfPath_GfMatrix4d_SdfPath__Hash_t.getCPtr(ctmOverrides)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ComputePointInstanceWorldBounds(UsdGeomPointInstancer instancer, long[] instanceIdBegin, uint numIds, GfBBox3d result)
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceWorldBounds(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceIdBegin, numIds, GfBBox3d.getCPtr(result));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputePointInstanceWorldBound(UsdGeomPointInstancer instancer, long instanceId)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceWorldBound(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceId), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ComputePointInstanceRelativeBounds(UsdGeomPointInstancer instancer, long[] instanceIdBegin, uint numIds, UsdPrim relativeToAncestorPrim, GfBBox3d result)
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceRelativeBounds(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceIdBegin, numIds, UsdPrim.getCPtr(relativeToAncestorPrim), GfBBox3d.getCPtr(result));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputePointInstanceRelativeBound(UsdGeomPointInstancer instancer, long instanceId, UsdPrim relativeToAncestorPrim)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceRelativeBound(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceId, UsdPrim.getCPtr(relativeToAncestorPrim)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ComputePointInstanceLocalBounds(UsdGeomPointInstancer instancer, long[] instanceIdBegin, uint numIds, GfBBox3d result)
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceLocalBounds(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceIdBegin, numIds, GfBBox3d.getCPtr(result));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputePointInstanceLocalBound(UsdGeomPointInstancer instancer, long instanceId)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceLocalBound(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceId), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ComputePointInstanceUntransformedBounds(UsdGeomPointInstancer instancer, long[] instanceIdBegin, uint numIds, GfBBox3d result)
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceUntransformedBounds(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceIdBegin, numIds, GfBBox3d.getCPtr(result));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public GfBBox3d ComputePointInstanceUntransformedBound(UsdGeomPointInstancer instancer, long instanceId)
        {
            GfBBox3d ret = new GfBBox3d(UsdCsPINVOKE.UsdGeomBBoxCache_ComputePointInstanceUntransformedBound(swigCPtr, UsdGeomPointInstancer.getCPtr(instancer), instanceId), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void Clear()
        {
            UsdCsPINVOKE.UsdGeomBBoxCache_Clear(swigCPtr);
        }

        public void SetIncludedPurposes(TfTokenVector includedPurposes)
        {
            UsdCsPINVOKE.UsdGeomBBoxCache_SetIncludedPurposes(swigCPtr, TfTokenVector.getCPtr(includedPurposes));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public TfTokenVector GetIncludedPurposes()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdGeomBBoxCache_GetIncludedPurposes(swigCPtr), false);
            return ret;
        }

        public bool GetUseExtentsHint()
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_GetUseExtentsHint(swigCPtr);
            return ret;
        }

        public bool GetIgnoreVisibility()
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_GetIgnoreVisibility(swigCPtr);
            return ret;
        }

        public void SetTime(UsdTimeCode time)
        {
            UsdCsPINVOKE.UsdGeomBBoxCache_SetTime(swigCPtr, UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdTimeCode GetTime()
        {
            UsdTimeCode ret = new UsdTimeCode(UsdCsPINVOKE.UsdGeomBBoxCache_GetTime(swigCPtr), true);
            return ret;
        }

        public void SetBaseTime(UsdTimeCode baseTime)
        {
            UsdCsPINVOKE.UsdGeomBBoxCache_SetBaseTime(swigCPtr, UsdTimeCode.getCPtr(baseTime));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdTimeCode GetBaseTime()
        {
            UsdTimeCode ret = new UsdTimeCode(UsdCsPINVOKE.UsdGeomBBoxCache_GetBaseTime(swigCPtr), true);
            return ret;
        }

        public void ClearBaseTime()
        {
            UsdCsPINVOKE.UsdGeomBBoxCache_ClearBaseTime(swigCPtr);
        }

        public bool HasBaseTime()
        {
            bool ret = UsdCsPINVOKE.UsdGeomBBoxCache_HasBaseTime(swigCPtr);
            return ret;
        }
    }
}
