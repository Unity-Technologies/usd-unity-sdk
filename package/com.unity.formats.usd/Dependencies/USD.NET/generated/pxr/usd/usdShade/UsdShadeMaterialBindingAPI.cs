//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdShadeMaterialBindingAPI : UsdAPISchemaBase
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal UsdShadeMaterialBindingAPI(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeMaterialBindingAPI obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdShadeMaterialBindingAPI()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdShadeMaterialBindingAPI(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public UsdShadeMaterialBindingAPI(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI__SWIG_0(UsdPrim.getCPtr(prim)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdShadeMaterialBindingAPI() : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI__SWIG_1(), true)
        {
        }

        public UsdShadeMaterialBindingAPI(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
            return ret;
        }

        public new static TfTokenVector GetSchemaAttributeNames()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetSchemaAttributeNames__SWIG_1(), false);
            return ret;
        }

        public static UsdShadeMaterialBindingAPI Get(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdShadeMaterialBindingAPI ret = new UsdShadeMaterialBindingAPI(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static UsdShadeMaterialBindingAPI Apply(UsdPrim prim)
        {
            UsdShadeMaterialBindingAPI ret = new UsdShadeMaterialBindingAPI(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Apply(UsdPrim.getCPtr(prim)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdRelationship GetDirectBindingRel(TfToken materialPurpose)
        {
            UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetDirectBindingRel__SWIG_0(swigCPtr, TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdRelationship GetDirectBindingRel()
        {
            UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetDirectBindingRel__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdRelationship GetCollectionBindingRel(TfToken bindingName, TfToken materialPurpose)
        {
            UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetCollectionBindingRel__SWIG_0(swigCPtr, TfToken.getCPtr(bindingName), TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdRelationship GetCollectionBindingRel(TfToken bindingName)
        {
            UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetCollectionBindingRel__SWIG_1(swigCPtr, TfToken.getCPtr(bindingName)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdRelationshipVector GetCollectionBindingRels(TfToken materialPurpose)
        {
            UsdRelationshipVector ret = new UsdRelationshipVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetCollectionBindingRels__SWIG_0(swigCPtr, TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdRelationshipVector GetCollectionBindingRels()
        {
            UsdRelationshipVector ret = new UsdRelationshipVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetCollectionBindingRels__SWIG_1(swigCPtr), true);
            return ret;
        }

        public class DirectBinding : global::System.IDisposable
        {
            private global::System.Runtime.InteropServices.HandleRef swigCPtr;
            protected bool swigCMemOwn;

            internal DirectBinding(global::System.IntPtr cPtr, bool cMemoryOwn)
            {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
            }

            internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DirectBinding obj)
            {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
            }

            ~DirectBinding()
            {
                Dispose();
            }

            public virtual void Dispose()
            {
                lock (this) {
                    if (swigCPtr.Handle != global::System.IntPtr.Zero)
                    {
                        if (swigCMemOwn)
                        {
                            swigCMemOwn = false;
                            UsdCsPINVOKE.delete_UsdShadeMaterialBindingAPI_DirectBinding(swigCPtr);
                        }
                        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                    }
                    global::System.GC.SuppressFinalize(this);
                }
            }

            public DirectBinding() : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI_DirectBinding__SWIG_0(), true)
            {
            }

            public DirectBinding(UsdRelationship bindingRel) : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI_DirectBinding__SWIG_1(UsdRelationship.getCPtr(bindingRel)), true)
            {
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            }

            public UsdShadeMaterial GetMaterial()
            {
                UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_DirectBinding_GetMaterial(swigCPtr), true);
                return ret;
            }

            public SdfPath GetMaterialPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_DirectBinding_GetMaterialPath(swigCPtr), false);
                return ret;
            }

            public UsdRelationship GetBindingRel()
            {
                UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_DirectBinding_GetBindingRel(swigCPtr), false);
                return ret;
            }

            public TfToken GetMaterialPurpose()
            {
                TfToken ret = new TfToken(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_DirectBinding_GetMaterialPurpose(swigCPtr), false);
                return ret;
            }
        }

        public class CollectionBinding : global::System.IDisposable
        {
            private global::System.Runtime.InteropServices.HandleRef swigCPtr;
            protected bool swigCMemOwn;

            internal CollectionBinding(global::System.IntPtr cPtr, bool cMemoryOwn)
            {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
            }

            internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CollectionBinding obj)
            {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
            }

            ~CollectionBinding()
            {
                Dispose();
            }

            public virtual void Dispose()
            {
                lock (this) {
                    if (swigCPtr.Handle != global::System.IntPtr.Zero)
                    {
                        if (swigCMemOwn)
                        {
                            swigCMemOwn = false;
                            UsdCsPINVOKE.delete_UsdShadeMaterialBindingAPI_CollectionBinding(swigCPtr);
                        }
                        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                    }
                    global::System.GC.SuppressFinalize(this);
                }
            }

            public CollectionBinding() : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI_CollectionBinding__SWIG_0(), true)
            {
            }

            public CollectionBinding(UsdRelationship collBindingRel) : this(UsdCsPINVOKE.new_UsdShadeMaterialBindingAPI_CollectionBinding__SWIG_1(UsdRelationship.getCPtr(collBindingRel)), true)
            {
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            }

            public UsdShadeMaterial GetMaterial()
            {
                UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CollectionBinding_GetMaterial(swigCPtr), true);
                return ret;
            }

            public UsdCollectionAPI GetCollection()
            {
                UsdCollectionAPI ret = new UsdCollectionAPI(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CollectionBinding_GetCollection(swigCPtr), true);
                return ret;
            }

            public bool IsValid()
            {
                bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CollectionBinding_IsValid(swigCPtr);
                return ret;
            }

            public SdfPath GetCollectionPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CollectionBinding_GetCollectionPath(swigCPtr), false);
                return ret;
            }

            public SdfPath GetMaterialPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CollectionBinding_GetMaterialPath(swigCPtr), false);
                return ret;
            }

            public UsdRelationship GetBindingRel()
            {
                UsdRelationship ret = new UsdRelationship(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CollectionBinding_GetBindingRel(swigCPtr), false);
                return ret;
            }
        }

        public UsdShadeMaterialBindingAPI.DirectBinding GetDirectBinding(TfToken materialPurpose)
        {
            UsdShadeMaterialBindingAPI.DirectBinding ret = new UsdShadeMaterialBindingAPI.DirectBinding(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetDirectBinding__SWIG_0(swigCPtr, TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeMaterialBindingAPI.DirectBinding GetDirectBinding()
        {
            UsdShadeMaterialBindingAPI.DirectBinding ret = new UsdShadeMaterialBindingAPI.DirectBinding(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetDirectBinding__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeMaterialBindingAPICollectionBindingVector GetCollectionBindings(TfToken materialPurpose)
        {
            UsdShadeMaterialBindingAPICollectionBindingVector ret = new UsdShadeMaterialBindingAPICollectionBindingVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetCollectionBindings__SWIG_0(swigCPtr, TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeMaterialBindingAPICollectionBindingVector GetCollectionBindings()
        {
            UsdShadeMaterialBindingAPICollectionBindingVector ret = new UsdShadeMaterialBindingAPICollectionBindingVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetCollectionBindings__SWIG_1(swigCPtr), true);
            return ret;
        }

        public static TfToken GetMaterialBindingStrength(UsdRelationship bindingRel)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetMaterialBindingStrength(UsdRelationship.getCPtr(bindingRel)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool SetMaterialBindingStrength(UsdRelationship bindingRel, TfToken bindingStrength)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_SetMaterialBindingStrength(UsdRelationship.getCPtr(bindingRel), TfToken.getCPtr(bindingStrength));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdShadeMaterial material, TfToken bindingStrength, TfToken materialPurpose)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_0(swigCPtr, UsdShadeMaterial.getCPtr(material), TfToken.getCPtr(bindingStrength), TfToken.getCPtr(materialPurpose));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdShadeMaterial material, TfToken bindingStrength)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_1(swigCPtr, UsdShadeMaterial.getCPtr(material), TfToken.getCPtr(bindingStrength));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdShadeMaterial material)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_2(swigCPtr, UsdShadeMaterial.getCPtr(material));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdCollectionAPI collection, UsdShadeMaterial material, TfToken bindingName, TfToken bindingStrength, TfToken materialPurpose)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_3(swigCPtr, UsdCollectionAPI.getCPtr(collection), UsdShadeMaterial.getCPtr(material), TfToken.getCPtr(bindingName), TfToken.getCPtr(bindingStrength), TfToken.getCPtr(materialPurpose));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdCollectionAPI collection, UsdShadeMaterial material, TfToken bindingName, TfToken bindingStrength)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_4(swigCPtr, UsdCollectionAPI.getCPtr(collection), UsdShadeMaterial.getCPtr(material), TfToken.getCPtr(bindingName), TfToken.getCPtr(bindingStrength));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdCollectionAPI collection, UsdShadeMaterial material, TfToken bindingName)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_5(swigCPtr, UsdCollectionAPI.getCPtr(collection), UsdShadeMaterial.getCPtr(material), TfToken.getCPtr(bindingName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Bind(UsdCollectionAPI collection, UsdShadeMaterial material)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_Bind__SWIG_6(swigCPtr, UsdCollectionAPI.getCPtr(collection), UsdShadeMaterial.getCPtr(material));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool UnbindDirectBinding(TfToken materialPurpose)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_UnbindDirectBinding__SWIG_0(swigCPtr, TfToken.getCPtr(materialPurpose));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool UnbindDirectBinding()
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_UnbindDirectBinding__SWIG_1(swigCPtr);
            return ret;
        }

        public bool UnbindCollectionBinding(TfToken bindingName, TfToken materialPurpose)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_UnbindCollectionBinding__SWIG_0(swigCPtr, TfToken.getCPtr(bindingName), TfToken.getCPtr(materialPurpose));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool UnbindCollectionBinding(TfToken bindingName)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_UnbindCollectionBinding__SWIG_1(swigCPtr, TfToken.getCPtr(bindingName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool UnbindAllBindings()
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_UnbindAllBindings(swigCPtr);
            return ret;
        }

        public bool RemovePrimFromBindingCollection(UsdPrim prim, TfToken bindingName, TfToken materialPurpose)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_RemovePrimFromBindingCollection(swigCPtr, UsdPrim.getCPtr(prim), TfToken.getCPtr(bindingName), TfToken.getCPtr(materialPurpose));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool AddPrimToBindingCollection(UsdPrim prim, TfToken bindingName, TfToken materialPurpose)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_AddPrimToBindingCollection(swigCPtr, UsdPrim.getCPtr(prim), TfToken.getCPtr(bindingName), TfToken.getCPtr(materialPurpose));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeMaterial ComputeBoundMaterial(TfToken materialPurpose, UsdRelationship bindingRel)
        {
            UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_ComputeBoundMaterial__SWIG_0(swigCPtr, TfToken.getCPtr(materialPurpose), UsdRelationship.getCPtr(bindingRel)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeMaterial ComputeBoundMaterial(TfToken materialPurpose)
        {
            UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_ComputeBoundMaterial__SWIG_1(swigCPtr, TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeMaterial ComputeBoundMaterial()
        {
            UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_ComputeBoundMaterial__SWIG_2(swigCPtr), true);
            return ret;
        }

        public static UsdShadeMaterialVector ComputeBoundMaterials(UsdPrimVector prims, TfToken materialPurpose, UsdRelationshipVector bindingRels)
        {
            UsdShadeMaterialVector ret = new UsdShadeMaterialVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_ComputeBoundMaterials__SWIG_0(UsdPrimVector.getCPtr(prims), TfToken.getCPtr(materialPurpose), UsdRelationshipVector.getCPtr(bindingRels)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static UsdShadeMaterialVector ComputeBoundMaterials(UsdPrimVector prims, TfToken materialPurpose)
        {
            UsdShadeMaterialVector ret = new UsdShadeMaterialVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_ComputeBoundMaterials__SWIG_1(UsdPrimVector.getCPtr(prims), TfToken.getCPtr(materialPurpose)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static UsdShadeMaterialVector ComputeBoundMaterials(UsdPrimVector prims)
        {
            UsdShadeMaterialVector ret = new UsdShadeMaterialVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_ComputeBoundMaterials__SWIG_2(UsdPrimVector.getCPtr(prims)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdGeomSubset CreateMaterialBindSubset(TfToken subsetName, VtIntArray indices, TfToken elementType)
        {
            UsdGeomSubset ret = new UsdGeomSubset(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CreateMaterialBindSubset__SWIG_0(swigCPtr, TfToken.getCPtr(subsetName), VtIntArray.getCPtr(indices), TfToken.getCPtr(elementType)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdGeomSubset CreateMaterialBindSubset(TfToken subsetName, VtIntArray indices)
        {
            UsdGeomSubset ret = new UsdGeomSubset(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_CreateMaterialBindSubset__SWIG_1(swigCPtr, TfToken.getCPtr(subsetName), VtIntArray.getCPtr(indices)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdGeomSubsetVector GetMaterialBindSubsets()
        {
            UsdGeomSubsetVector ret = new UsdGeomSubsetVector(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetMaterialBindSubsets(swigCPtr), true);
            return ret;
        }

        public bool SetMaterialBindSubsetsFamilyType(TfToken familyType)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterialBindingAPI_SetMaterialBindSubsetsFamilyType(swigCPtr, TfToken.getCPtr(familyType));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfToken GetMaterialBindSubsetsFamilyType()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdShadeMaterialBindingAPI_GetMaterialBindSubsetsFamilyType(swigCPtr), true);
            return ret;
        }
    }
}
