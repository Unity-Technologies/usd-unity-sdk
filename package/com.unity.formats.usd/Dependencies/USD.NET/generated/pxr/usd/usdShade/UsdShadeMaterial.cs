//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdShadeMaterial : UsdShadeNodeGraph
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal UsdShadeMaterial(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdShadeMaterial_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeMaterial obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdShadeMaterial()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdShadeMaterial(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public UsdShadeMaterial(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdShadeMaterial__SWIG_0(UsdPrim.getCPtr(prim)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdShadeMaterial() : this(UsdCsPINVOKE.new_UsdShadeMaterial__SWIG_1(), true)
        {
        }

        public UsdShadeMaterial(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdShadeMaterial__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeMaterial_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
            return ret;
        }

        public new static TfTokenVector GetSchemaAttributeNames()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdShadeMaterial_GetSchemaAttributeNames__SWIG_1(), false);
            return ret;
        }

        public new static UsdShadeMaterial Get(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public new static UsdShadeMaterial Define(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute GetSurfaceAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_GetSurfaceAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateSurfaceAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateSurfaceAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateSurfaceAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateSurfaceAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateSurfaceAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateSurfaceAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public UsdAttribute GetDisplacementAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_GetDisplacementAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateDisplacementAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateDisplacementAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateDisplacementAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateDisplacementAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateDisplacementAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateDisplacementAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public UsdAttribute GetVolumeAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_GetVolumeAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateVolumeAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateVolumeAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateVolumeAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateVolumeAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateVolumeAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeMaterial_CreateVolumeAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public UsdShadeOutput CreateSurfaceOutput(TfToken renderContext)
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_CreateSurfaceOutput__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeOutput CreateSurfaceOutput()
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_CreateSurfaceOutput__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeOutput GetSurfaceOutput(TfToken renderContext)
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_GetSurfaceOutput__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeOutput GetSurfaceOutput()
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_GetSurfaceOutput__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeShader ComputeSurfaceSource(TfToken renderContext, TfToken sourceName, SWIGTYPE_p_UsdShadeAttributeType sourceType)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeSurfaceSource__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext), TfToken.getCPtr(sourceName), SWIGTYPE_p_UsdShadeAttributeType.getCPtr(sourceType)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeSurfaceSource(TfToken renderContext, TfToken sourceName)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeSurfaceSource__SWIG_1(swigCPtr, TfToken.getCPtr(renderContext), TfToken.getCPtr(sourceName)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeSurfaceSource(TfToken renderContext)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeSurfaceSource__SWIG_2(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeSurfaceSource()
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeSurfaceSource__SWIG_3(swigCPtr), true);
            return ret;
        }

        public UsdShadeOutput CreateDisplacementOutput(TfToken renderContext)
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_CreateDisplacementOutput__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeOutput CreateDisplacementOutput()
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_CreateDisplacementOutput__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeOutput GetDisplacementOutput(TfToken renderContext)
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_GetDisplacementOutput__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeOutput GetDisplacementOutput()
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_GetDisplacementOutput__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeShader ComputeDisplacementSource(TfToken renderContext, TfToken sourceName, SWIGTYPE_p_UsdShadeAttributeType sourceType)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeDisplacementSource__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext), TfToken.getCPtr(sourceName), SWIGTYPE_p_UsdShadeAttributeType.getCPtr(sourceType)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeDisplacementSource(TfToken renderContext, TfToken sourceName)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeDisplacementSource__SWIG_1(swigCPtr, TfToken.getCPtr(renderContext), TfToken.getCPtr(sourceName)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeDisplacementSource(TfToken renderContext)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeDisplacementSource__SWIG_2(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeDisplacementSource()
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeDisplacementSource__SWIG_3(swigCPtr), true);
            return ret;
        }

        public UsdShadeOutput CreateVolumeOutput(TfToken renderContext)
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_CreateVolumeOutput__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeOutput CreateVolumeOutput()
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_CreateVolumeOutput__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeOutput GetVolumeOutput(TfToken renderContext)
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_GetVolumeOutput__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeOutput GetVolumeOutput()
        {
            UsdShadeOutput ret = new UsdShadeOutput(UsdCsPINVOKE.UsdShadeMaterial_GetVolumeOutput__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdShadeShader ComputeVolumeSource(TfToken renderContext, TfToken sourceName, SWIGTYPE_p_UsdShadeAttributeType sourceType)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeVolumeSource__SWIG_0(swigCPtr, TfToken.getCPtr(renderContext), TfToken.getCPtr(sourceName), SWIGTYPE_p_UsdShadeAttributeType.getCPtr(sourceType)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeVolumeSource(TfToken renderContext, TfToken sourceName)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeVolumeSource__SWIG_1(swigCPtr, TfToken.getCPtr(renderContext), TfToken.getCPtr(sourceName)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeVolumeSource(TfToken renderContext)
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeVolumeSource__SWIG_2(swigCPtr, TfToken.getCPtr(renderContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeShader ComputeVolumeSource()
        {
            UsdShadeShader ret = new UsdShadeShader(UsdCsPINVOKE.UsdShadeMaterial_ComputeVolumeSource__SWIG_3(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetEditContextForVariant(TfToken MaterialVariantName, SdfLayerHandle layer)
        {
            SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdShadeMaterial_GetEditContextForVariant__SWIG_0(swigCPtr, TfToken.getCPtr(MaterialVariantName), SdfLayerHandle.getCPtr(layer)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetEditContextForVariant(TfToken MaterialVariantName)
        {
            SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdShadeMaterial_GetEditContextForVariant__SWIG_1(swigCPtr, TfToken.getCPtr(MaterialVariantName)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdVariantSet GetMaterialVariant()
        {
            UsdVariantSet ret = new UsdVariantSet(UsdCsPINVOKE.UsdShadeMaterial_GetMaterialVariant(swigCPtr), true);
            return ret;
        }

        public static bool CreateMasterMaterialVariant(UsdPrim masterPrim, UsdPrimVector MaterialPrims, TfToken masterVariantSetName)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterial_CreateMasterMaterialVariant__SWIG_0(UsdPrim.getCPtr(masterPrim), UsdPrimVector.getCPtr(MaterialPrims), TfToken.getCPtr(masterVariantSetName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool CreateMasterMaterialVariant(UsdPrim masterPrim, UsdPrimVector MaterialPrims)
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterial_CreateMasterMaterialVariant__SWIG_1(UsdPrim.getCPtr(masterPrim), UsdPrimVector.getCPtr(MaterialPrims));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdShadeMaterial GetBaseMaterial()
        {
            UsdShadeMaterial ret = new UsdShadeMaterial(UsdCsPINVOKE.UsdShadeMaterial_GetBaseMaterial(swigCPtr), true);
            return ret;
        }

        public SdfPath GetBaseMaterialPath()
        {
            SdfPath ret = new SdfPath(UsdCsPINVOKE.UsdShadeMaterial_GetBaseMaterialPath(swigCPtr), true);
            return ret;
        }

        public void SetBaseMaterial(UsdShadeMaterial baseMaterial)
        {
            UsdCsPINVOKE.UsdShadeMaterial_SetBaseMaterial(swigCPtr, UsdShadeMaterial.getCPtr(baseMaterial));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetBaseMaterialPath(SdfPath baseMaterialPath)
        {
            UsdCsPINVOKE.UsdShadeMaterial_SetBaseMaterialPath(swigCPtr, SdfPath.getCPtr(baseMaterialPath));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void ClearBaseMaterial()
        {
            UsdCsPINVOKE.UsdShadeMaterial_ClearBaseMaterial(swigCPtr);
        }

        public bool HasBaseMaterial()
        {
            bool ret = UsdCsPINVOKE.UsdShadeMaterial_HasBaseMaterial(swigCPtr);
            return ret;
        }
    }
}
