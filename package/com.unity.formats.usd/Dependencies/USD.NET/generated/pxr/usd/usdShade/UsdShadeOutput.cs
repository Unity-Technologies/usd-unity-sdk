//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdShadeOutput : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdShadeOutput(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdShadeOutput obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdShadeOutput()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdShadeOutput(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdShadeOutput() : this(UsdCsPINVOKE.new_UsdShadeOutput__SWIG_0(), true)
        {
        }

        public TfToken GetFullName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdShadeOutput_GetFullName(swigCPtr), false);
            return ret;
        }

        public TfToken GetBaseName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdShadeOutput_GetBaseName(swigCPtr), true);
            return ret;
        }

        public UsdPrim GetPrim()
        {
            UsdPrim ret = new UsdPrim(UsdCsPINVOKE.UsdShadeOutput_GetPrim(swigCPtr), true);
            return ret;
        }

        public SdfValueTypeName GetTypeName()
        {
            SdfValueTypeName ret = new SdfValueTypeName(UsdCsPINVOKE.UsdShadeOutput_GetTypeName(swigCPtr), true);
            return ret;
        }

        public bool Set(VtValue value, UsdTimeCode time)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_Set__SWIG_0(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Set(VtValue value)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_Set__SWIG_1(swigCPtr, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetRenderType(TfToken renderType)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_SetRenderType(swigCPtr, TfToken.getCPtr(renderType));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfToken GetRenderType()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdShadeOutput_GetRenderType(swigCPtr), true);
            return ret;
        }

        public bool HasRenderType()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_HasRenderType(swigCPtr);
            return ret;
        }

        public SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t GetSdrMetadata()
        {
            SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t ret = new SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t(UsdCsPINVOKE.UsdShadeOutput_GetSdrMetadata(swigCPtr), true);
            return ret;
        }

        public string GetSdrMetadataByKey(TfToken key)
        {
            string ret = UsdCsPINVOKE.UsdShadeOutput_GetSdrMetadataByKey(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void SetSdrMetadata(SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t sdrMetadata)
        {
            UsdCsPINVOKE.UsdShadeOutput_SetSdrMetadata(swigCPtr, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(sdrMetadata));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetSdrMetadataByKey(TfToken key, string value)
        {
            UsdCsPINVOKE.UsdShadeOutput_SetSdrMetadataByKey(swigCPtr, TfToken.getCPtr(key), value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasSdrMetadata()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_HasSdrMetadata(swigCPtr);
            return ret;
        }

        public bool HasSdrMetadataByKey(TfToken key)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_HasSdrMetadataByKey(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ClearSdrMetadata()
        {
            UsdCsPINVOKE.UsdShadeOutput_ClearSdrMetadata(swigCPtr);
        }

        public void ClearSdrMetadataByKey(TfToken key)
        {
            UsdCsPINVOKE.UsdShadeOutput_ClearSdrMetadataByKey(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdShadeOutput(UsdAttribute attr) : this(UsdCsPINVOKE.new_UsdShadeOutput__SWIG_1(UsdAttribute.getCPtr(attr)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public static bool IsOutput(UsdAttribute attr)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_IsOutput(UsdAttribute.getCPtr(attr));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute GetAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdShadeOutput_GetAttr(swigCPtr), true);
            return ret;
        }

        public bool IsDefined()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_IsDefined(swigCPtr);
            return ret;
        }

        public bool CanConnect(UsdAttribute source)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_CanConnect__SWIG_0(swigCPtr, UsdAttribute.getCPtr(source));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool CanConnect(UsdShadeInput sourceInput)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_CanConnect__SWIG_1(swigCPtr, UsdShadeInput.getCPtr(sourceInput));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool CanConnect(UsdShadeOutput sourceOutput)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_CanConnect__SWIG_2(swigCPtr, UsdShadeOutput.getCPtr(sourceOutput));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ConnectToSource(UsdShadeConnectableAPI source, TfToken sourceName, UsdShadeAttributeType sourceType, SdfValueTypeName typeName)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ConnectToSource__SWIG_0(swigCPtr, UsdShadeConnectableAPI.getCPtr(source), TfToken.getCPtr(sourceName), (int)sourceType, SdfValueTypeName.getCPtr(typeName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ConnectToSource(UsdShadeConnectableAPI source, TfToken sourceName, UsdShadeAttributeType sourceType)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ConnectToSource__SWIG_1(swigCPtr, UsdShadeConnectableAPI.getCPtr(source), TfToken.getCPtr(sourceName), (int)sourceType);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ConnectToSource(UsdShadeConnectableAPI source, TfToken sourceName)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ConnectToSource__SWIG_2(swigCPtr, UsdShadeConnectableAPI.getCPtr(source), TfToken.getCPtr(sourceName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ConnectToSource(SdfPath sourcePath)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ConnectToSource__SWIG_3(swigCPtr, SdfPath.getCPtr(sourcePath));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ConnectToSource(UsdShadeInput sourceInput)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ConnectToSource__SWIG_4(swigCPtr, UsdShadeInput.getCPtr(sourceInput));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ConnectToSource(UsdShadeOutput sourceOutput)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ConnectToSource__SWIG_5(swigCPtr, UsdShadeOutput.getCPtr(sourceOutput));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool GetConnectedSource(UsdShadeConnectableAPI source, TfToken sourceName, out UsdShadeAttributeType sourceType)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_GetConnectedSource(swigCPtr, UsdShadeConnectableAPI.getCPtr(source), TfToken.getCPtr(sourceName), out sourceType);
            return ret;
        }

        public bool GetRawConnectedSourcePaths(SdfPathVector sourcePaths)
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_GetRawConnectedSourcePaths(swigCPtr, SdfPathVector.getCPtr(sourcePaths));
            return ret;
        }

        public bool HasConnectedSource()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_HasConnectedSource(swigCPtr);
            return ret;
        }

        public bool IsSourceConnectionFromBaseMaterial()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_IsSourceConnectionFromBaseMaterial(swigCPtr);
            return ret;
        }

        public bool DisconnectSource()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_DisconnectSource(swigCPtr);
            return ret;
        }

        public bool ClearSource()
        {
            bool ret = UsdCsPINVOKE.UsdShadeOutput_ClearSource(swigCPtr);
            return ret;
        }
    }
}
