//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfSpec : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfSpec(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfSpec obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfSpec()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfSpec(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public SWIGTYPE_p_SdfSchemaBase GetSchema()
        {
            SWIGTYPE_p_SdfSchemaBase ret = new SWIGTYPE_p_SdfSchemaBase(UsdCsPINVOKE.SdfSpec_GetSchema(swigCPtr), false);
            return ret;
        }

        public SdfSpecType GetSpecType()
        {
            SdfSpecType ret = (SdfSpecType)UsdCsPINVOKE.SdfSpec_GetSpecType(swigCPtr);
            return ret;
        }

        public bool IsDormant()
        {
            bool ret = UsdCsPINVOKE.SdfSpec_IsDormant(swigCPtr);
            return ret;
        }

        public SdfLayerHandle GetLayer()
        {
            SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfSpec_GetLayer(swigCPtr), true);
            return ret;
        }

        public SdfPath GetPath()
        {
            SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfSpec_GetPath(swigCPtr), true);
            return ret;
        }

        public bool PermissionToEdit()
        {
            bool ret = UsdCsPINVOKE.SdfSpec_PermissionToEdit(swigCPtr);
            return ret;
        }

        public TfTokenVector ListInfoKeys()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfSpec_ListInfoKeys(swigCPtr), true);
            return ret;
        }

        public TfTokenVector GetMetaDataInfoKeys()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfSpec_GetMetaDataInfoKeys(swigCPtr), true);
            return ret;
        }

        public TfToken GetMetaDataDisplayGroup(TfToken key)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfSpec_GetMetaDataDisplayGroup(swigCPtr, TfToken.getCPtr(key)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetInfo(TfToken key)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.SdfSpec_GetInfo(swigCPtr, TfToken.getCPtr(key)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void SetInfo(TfToken key, VtValue value)
        {
            UsdCsPINVOKE.SdfSpec_SetInfo(swigCPtr, TfToken.getCPtr(key), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetInfoDictionaryValue(TfToken dictionaryKey, TfToken entryKey, VtValue value)
        {
            UsdCsPINVOKE.SdfSpec_SetInfoDictionaryValue(swigCPtr, TfToken.getCPtr(dictionaryKey), TfToken.getCPtr(entryKey), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasInfo(TfToken key)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_HasInfo(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ClearInfo(TfToken key)
        {
            UsdCsPINVOKE.SdfSpec_ClearInfo(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public TfType GetTypeForInfo(TfToken key)
        {
            TfType ret = new TfType(UsdCsPINVOKE.SdfSpec_GetTypeForInfo(swigCPtr, TfToken.getCPtr(key)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetFallbackForInfo(TfToken key)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.SdfSpec_GetFallbackForInfo(swigCPtr, TfToken.getCPtr(key)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool WriteToStream(SWIGTYPE_p_std__ostream arg0, uint indent)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_WriteToStream__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(arg0), indent);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool WriteToStream(SWIGTYPE_p_std__ostream arg0)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_WriteToStream__SWIG_1(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(arg0));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsInert(bool ignoreChildren)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_IsInert__SWIG_0(swigCPtr, ignoreChildren);
            return ret;
        }

        public bool IsInert()
        {
            bool ret = UsdCsPINVOKE.SdfSpec_IsInert__SWIG_1(swigCPtr);
            return ret;
        }

        public TfTokenVector ListFields()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfSpec_ListFields(swigCPtr), true);
            return ret;
        }

        public bool HasField(TfToken name)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_HasField(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetField(TfToken name)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.SdfSpec_GetField(swigCPtr, TfToken.getCPtr(name)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetField(TfToken name, VtValue value)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_SetField(swigCPtr, TfToken.getCPtr(name), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ClearField(TfToken name)
        {
            bool ret = UsdCsPINVOKE.SdfSpec_ClearField(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }
}
