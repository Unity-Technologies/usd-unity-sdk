//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfPathAncestorsRange : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfPathAncestorsRange(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfPathAncestorsRange obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfPathAncestorsRange()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfPathAncestorsRange(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public SdfPathAncestorsRange(SdfPath path) : this(UsdCsPINVOKE.new_SdfPathAncestorsRange(SdfPath.getCPtr(path)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfPath GetPath()
        {
            SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_GetPath(swigCPtr), false);
            return ret;
        }

        public class iterator : global::System.IDisposable
        {
            private global::System.Runtime.InteropServices.HandleRef swigCPtr;
            protected bool swigCMemOwn;

            internal iterator(global::System.IntPtr cPtr, bool cMemoryOwn)
            {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
            }

            internal static global::System.Runtime.InteropServices.HandleRef getCPtr(iterator obj)
            {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
            }

            ~iterator()
            {
                Dispose();
            }

            public virtual void Dispose()
            {
                lock (this) {
                    if (swigCPtr.Handle != global::System.IntPtr.Zero)
                    {
                        if (swigCMemOwn)
                        {
                            swigCMemOwn = false;
                            UsdCsPINVOKE.delete_SdfPathAncestorsRange_iterator(swigCPtr);
                        }
                        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                    }
                    global::System.GC.SuppressFinalize(this);
                }
            }

            public iterator(SdfPath path) : this(UsdCsPINVOKE.new_SdfPathAncestorsRange_iterator__SWIG_0(SdfPath.getCPtr(path)), true)
            {
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            }

            public iterator() : this(UsdCsPINVOKE.new_SdfPathAncestorsRange_iterator__SWIG_1(), true)
            {
            }

            public SdfPath __ref__()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator___ref__(swigCPtr), false);
                return ret;
            }

            public SdfPath __deref__()
            {
                global::System.IntPtr cPtr = UsdCsPINVOKE.SdfPathAncestorsRange_iterator___deref__(swigCPtr);
                SdfPath ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdfPath(cPtr, false);
                return ret;
            }

            public uint GetPathElementCount()
            {
                uint ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetPathElementCount(swigCPtr);
                return ret;
            }

            public bool IsAbsolutePath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsAbsolutePath(swigCPtr);
                return ret;
            }

            public bool IsAbsoluteRootPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsAbsoluteRootPath(swigCPtr);
                return ret;
            }

            public bool IsPrimPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsPrimPath(swigCPtr);
                return ret;
            }

            public bool IsAbsoluteRootOrPrimPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsAbsoluteRootOrPrimPath(swigCPtr);
                return ret;
            }

            public bool IsRootPrimPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsRootPrimPath(swigCPtr);
                return ret;
            }

            public bool IsPropertyPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsPropertyPath(swigCPtr);
                return ret;
            }

            public bool IsPrimPropertyPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsPrimPropertyPath(swigCPtr);
                return ret;
            }

            public bool IsNamespacedPropertyPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsNamespacedPropertyPath(swigCPtr);
                return ret;
            }

            public bool IsPrimVariantSelectionPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsPrimVariantSelectionPath(swigCPtr);
                return ret;
            }

            public bool IsPrimOrPrimVariantSelectionPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsPrimOrPrimVariantSelectionPath(swigCPtr);
                return ret;
            }

            public bool ContainsPrimVariantSelection()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ContainsPrimVariantSelection(swigCPtr);
                return ret;
            }

            public bool ContainsPropertyElements()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ContainsPropertyElements(swigCPtr);
                return ret;
            }

            public bool ContainsTargetPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ContainsTargetPath(swigCPtr);
                return ret;
            }

            public bool IsRelationalAttributePath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsRelationalAttributePath(swigCPtr);
                return ret;
            }

            public bool IsTargetPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsTargetPath(swigCPtr);
                return ret;
            }

            public bool IsMapperPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsMapperPath(swigCPtr);
                return ret;
            }

            public bool IsMapperArgPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsMapperArgPath(swigCPtr);
                return ret;
            }

            public bool IsExpressionPath()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsExpressionPath(swigCPtr);
                return ret;
            }

            public bool IsEmpty()
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_IsEmpty(swigCPtr);
                return ret;
            }

            public TfToken GetToken()
            {
                TfToken ret = new TfToken(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetToken(swigCPtr), false);
                return ret;
            }

            public string GetString()
            {
                string ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetString(swigCPtr);
                return ret;
            }

            public string GetText()
            {
                string ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetText(swigCPtr);
                return ret;
            }

            public SdfPathVector GetPrefixes()
            {
                SdfPathVector ret = new SdfPathVector(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetPrefixes__SWIG_0(swigCPtr), true);
                return ret;
            }

            public void GetPrefixes(SdfPathVector prefixes)
            {
                UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetPrefixes__SWIG_1(swigCPtr, SdfPathVector.getCPtr(prefixes));
            }

            public SdfPathAncestorsRange GetAncestorsRange()
            {
                SdfPathAncestorsRange ret = new SdfPathAncestorsRange(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetAncestorsRange(swigCPtr), true);
                return ret;
            }

            public string GetName()
            {
                string ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetName(swigCPtr);
                return ret;
            }

            public TfToken GetNameToken()
            {
                TfToken ret = new TfToken(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetNameToken(swigCPtr), false);
                return ret;
            }

            public string GetElementString()
            {
                string ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetElementString(swigCPtr);
                return ret;
            }

            public TfToken GetElementToken()
            {
                TfToken ret = new TfToken(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetElementToken(swigCPtr), true);
                return ret;
            }

            public SdfPath ReplaceName(TfToken newName)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ReplaceName(swigCPtr, TfToken.getCPtr(newName)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath GetTargetPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetTargetPath(swigCPtr), false);
                return ret;
            }

            public void GetAllTargetPathsRecursively(SdfPathVector result)
            {
                UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetAllTargetPathsRecursively(swigCPtr, SdfPathVector.getCPtr(result));
            }

            public SdfPathStringPair GetVariantSelection()
            {
                SdfPathStringPair ret = new SdfPathStringPair(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetVariantSelection(swigCPtr), true);
                return ret;
            }

            public bool HasPrefix(SdfPath prefix)
            {
                bool ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_HasPrefix(swigCPtr, SdfPath.getCPtr(prefix));
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath GetParentPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetParentPath(swigCPtr), true);
                return ret;
            }

            public SdfPath GetPrimPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetPrimPath(swigCPtr), true);
                return ret;
            }

            public SdfPath GetPrimOrPrimVariantSelectionPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetPrimOrPrimVariantSelectionPath(swigCPtr), true);
                return ret;
            }

            public SdfPath GetAbsoluteRootOrPrimPath()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetAbsoluteRootOrPrimPath(swigCPtr), true);
                return ret;
            }

            public SdfPath StripAllVariantSelections()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_StripAllVariantSelections(swigCPtr), true);
                return ret;
            }

            public SdfPath AppendPath(SdfPath newSuffix)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendPath(swigCPtr, SdfPath.getCPtr(newSuffix)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendChild(TfToken childName)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendChild(swigCPtr, TfToken.getCPtr(childName)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendProperty(TfToken propName)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendProperty(swigCPtr, TfToken.getCPtr(propName)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendVariantSelection(string variantSet, string variant)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendVariantSelection(swigCPtr, variantSet, variant), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendTarget(SdfPath targetPath)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendTarget(swigCPtr, SdfPath.getCPtr(targetPath)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendRelationalAttribute(TfToken attrName)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendRelationalAttribute(swigCPtr, TfToken.getCPtr(attrName)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath ReplaceTargetPath(SdfPath newTargetPath)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ReplaceTargetPath(swigCPtr, SdfPath.getCPtr(newTargetPath)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendMapper(SdfPath targetPath)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendMapper(swigCPtr, SdfPath.getCPtr(targetPath)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendMapperArg(TfToken argName)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendMapperArg(swigCPtr, TfToken.getCPtr(argName)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendExpression()
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendExpression(swigCPtr), true);
                return ret;
            }

            public SdfPath AppendElementString(string element)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendElementString(swigCPtr, element), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath AppendElementToken(TfToken elementTok)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_AppendElementToken(swigCPtr, TfToken.getCPtr(elementTok)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath ReplacePrefix(SdfPath oldPrefix, SdfPath newPrefix, bool fixTargetPaths)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ReplacePrefix__SWIG_0(swigCPtr, SdfPath.getCPtr(oldPrefix), SdfPath.getCPtr(newPrefix), fixTargetPaths), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath ReplacePrefix(SdfPath oldPrefix, SdfPath newPrefix)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_ReplacePrefix__SWIG_1(swigCPtr, SdfPath.getCPtr(oldPrefix), SdfPath.getCPtr(newPrefix)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath GetCommonPrefix(SdfPath path)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetCommonPrefix(swigCPtr, SdfPath.getCPtr(path)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPathPair RemoveCommonSuffix(SdfPath otherPath, bool stopAtRootPrim)
            {
                SdfPathPair ret = new SdfPathPair(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_RemoveCommonSuffix__SWIG_0(swigCPtr, SdfPath.getCPtr(otherPath), stopAtRootPrim), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPathPair RemoveCommonSuffix(SdfPath otherPath)
            {
                SdfPathPair ret = new SdfPathPair(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_RemoveCommonSuffix__SWIG_1(swigCPtr, SdfPath.getCPtr(otherPath)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath MakeAbsolutePath(SdfPath anchor)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_MakeAbsolutePath(swigCPtr, SdfPath.getCPtr(anchor)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public SdfPath MakeRelativePath(SdfPath anchor)
            {
                SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPathAncestorsRange_iterator_MakeRelativePath(swigCPtr, SdfPath.getCPtr(anchor)), true);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }

            public uint GetHash()
            {
                uint ret = UsdCsPINVOKE.SdfPathAncestorsRange_iterator_GetHash(swigCPtr);
                return ret;
            }
        }

        public SdfPathAncestorsRange.iterator begin()
        {
            SdfPathAncestorsRange.iterator ret = new SdfPathAncestorsRange.iterator(UsdCsPINVOKE.SdfPathAncestorsRange_begin(swigCPtr), true);
            return ret;
        }

        public SdfPathAncestorsRange.iterator end()
        {
            SdfPathAncestorsRange.iterator ret = new SdfPathAncestorsRange.iterator(UsdCsPINVOKE.SdfPathAncestorsRange_end(swigCPtr), true);
            return ret;
        }
    }
}
