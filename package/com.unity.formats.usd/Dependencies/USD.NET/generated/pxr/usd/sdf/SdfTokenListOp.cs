//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfTokenListOp : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfTokenListOp(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfTokenListOp obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfTokenListOp()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfTokenListOp(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public static SdfTokenListOp CreateExplicit(TfTokenVector explicitItems)
        {
            SdfTokenListOp ret = new SdfTokenListOp(UsdCsPINVOKE.SdfTokenListOp_CreateExplicit__SWIG_0(TfTokenVector.getCPtr(explicitItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfTokenListOp CreateExplicit()
        {
            SdfTokenListOp ret = new SdfTokenListOp(UsdCsPINVOKE.SdfTokenListOp_CreateExplicit__SWIG_1(), true);
            return ret;
        }

        public static SdfTokenListOp Create(TfTokenVector prependedItems, TfTokenVector appendedItems, TfTokenVector deletedItems)
        {
            SdfTokenListOp ret = new SdfTokenListOp(UsdCsPINVOKE.SdfTokenListOp_Create__SWIG_0(TfTokenVector.getCPtr(prependedItems), TfTokenVector.getCPtr(appendedItems), TfTokenVector.getCPtr(deletedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfTokenListOp Create(TfTokenVector prependedItems, TfTokenVector appendedItems)
        {
            SdfTokenListOp ret = new SdfTokenListOp(UsdCsPINVOKE.SdfTokenListOp_Create__SWIG_1(TfTokenVector.getCPtr(prependedItems), TfTokenVector.getCPtr(appendedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfTokenListOp Create(TfTokenVector prependedItems)
        {
            SdfTokenListOp ret = new SdfTokenListOp(UsdCsPINVOKE.SdfTokenListOp_Create__SWIG_2(TfTokenVector.getCPtr(prependedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfTokenListOp Create()
        {
            SdfTokenListOp ret = new SdfTokenListOp(UsdCsPINVOKE.SdfTokenListOp_Create__SWIG_3(), true);
            return ret;
        }

        public SdfTokenListOp() : this(UsdCsPINVOKE.new_SdfTokenListOp(), true)
        {
        }

        public void Swap(SdfTokenListOp rhs)
        {
            UsdCsPINVOKE.SdfTokenListOp_Swap(swigCPtr, SdfTokenListOp.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasKeys()
        {
            bool ret = UsdCsPINVOKE.SdfTokenListOp_HasKeys(swigCPtr);
            return ret;
        }

        public bool HasItem(TfToken item)
        {
            bool ret = UsdCsPINVOKE.SdfTokenListOp_HasItem(swigCPtr, TfToken.getCPtr(item));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsExplicit()
        {
            bool ret = UsdCsPINVOKE.SdfTokenListOp_IsExplicit(swigCPtr);
            return ret;
        }

        public TfTokenVector GetExplicitItems()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetExplicitItems(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetAddedItems()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetAddedItems(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetPrependedItems()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetPrependedItems(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetAppendedItems()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetAppendedItems(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetDeletedItems()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetDeletedItems(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetOrderedItems()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetOrderedItems(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetItems(SdfListOpType type)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfTokenListOp_GetItems(swigCPtr, (int)type), false);
            return ret;
        }

        public void SetExplicitItems(TfTokenVector items)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetExplicitItems(swigCPtr, TfTokenVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAddedItems(TfTokenVector items)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetAddedItems(swigCPtr, TfTokenVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetPrependedItems(TfTokenVector items)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetPrependedItems(swigCPtr, TfTokenVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAppendedItems(TfTokenVector items)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetAppendedItems(swigCPtr, TfTokenVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetDeletedItems(TfTokenVector items)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetDeletedItems(swigCPtr, TfTokenVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetOrderedItems(TfTokenVector items)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetOrderedItems(swigCPtr, TfTokenVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetItems(TfTokenVector items, SdfListOpType type)
        {
            UsdCsPINVOKE.SdfTokenListOp_SetItems(swigCPtr, TfTokenVector.getCPtr(items), (int)type);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Clear()
        {
            UsdCsPINVOKE.SdfTokenListOp_Clear(swigCPtr);
        }

        public void ClearAndMakeExplicit()
        {
            UsdCsPINVOKE.SdfTokenListOp_ClearAndMakeExplicit(swigCPtr);
        }

        public bool ReplaceOperations(SdfListOpType op, uint index, uint n, TfTokenVector newItems)
        {
            bool ret = UsdCsPINVOKE.SdfTokenListOp_ReplaceOperations(swigCPtr, (int)op, index, n, TfTokenVector.getCPtr(newItems));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ComposeOperations(SdfTokenListOp stronger, SdfListOpType op)
        {
            UsdCsPINVOKE.SdfTokenListOp_ComposeOperations(swigCPtr, SdfTokenListOp.getCPtr(stronger), (int)op);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }
    }
}
