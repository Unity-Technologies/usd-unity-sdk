//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfUIntListOp : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfUIntListOp(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfUIntListOp obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfUIntListOp()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfUIntListOp(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public static SdfUIntListOp CreateExplicit(StdUIntVector explicitItems)
        {
            SdfUIntListOp ret = new SdfUIntListOp(UsdCsPINVOKE.SdfUIntListOp_CreateExplicit__SWIG_0(StdUIntVector.getCPtr(explicitItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUIntListOp CreateExplicit()
        {
            SdfUIntListOp ret = new SdfUIntListOp(UsdCsPINVOKE.SdfUIntListOp_CreateExplicit__SWIG_1(), true);
            return ret;
        }

        public static SdfUIntListOp Create(StdUIntVector prependedItems, StdUIntVector appendedItems, StdUIntVector deletedItems)
        {
            SdfUIntListOp ret = new SdfUIntListOp(UsdCsPINVOKE.SdfUIntListOp_Create__SWIG_0(StdUIntVector.getCPtr(prependedItems), StdUIntVector.getCPtr(appendedItems), StdUIntVector.getCPtr(deletedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUIntListOp Create(StdUIntVector prependedItems, StdUIntVector appendedItems)
        {
            SdfUIntListOp ret = new SdfUIntListOp(UsdCsPINVOKE.SdfUIntListOp_Create__SWIG_1(StdUIntVector.getCPtr(prependedItems), StdUIntVector.getCPtr(appendedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUIntListOp Create(StdUIntVector prependedItems)
        {
            SdfUIntListOp ret = new SdfUIntListOp(UsdCsPINVOKE.SdfUIntListOp_Create__SWIG_2(StdUIntVector.getCPtr(prependedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUIntListOp Create()
        {
            SdfUIntListOp ret = new SdfUIntListOp(UsdCsPINVOKE.SdfUIntListOp_Create__SWIG_3(), true);
            return ret;
        }

        public SdfUIntListOp() : this(UsdCsPINVOKE.new_SdfUIntListOp(), true)
        {
        }

        public void Swap(SdfUIntListOp rhs)
        {
            UsdCsPINVOKE.SdfUIntListOp_Swap(swigCPtr, SdfUIntListOp.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasKeys()
        {
            bool ret = UsdCsPINVOKE.SdfUIntListOp_HasKeys(swigCPtr);
            return ret;
        }

        public bool HasItem(uint item)
        {
            bool ret = UsdCsPINVOKE.SdfUIntListOp_HasItem(swigCPtr, item);
            return ret;
        }

        public bool IsExplicit()
        {
            bool ret = UsdCsPINVOKE.SdfUIntListOp_IsExplicit(swigCPtr);
            return ret;
        }

        public StdUIntVector GetExplicitItems()
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetExplicitItems(swigCPtr), false);
            return ret;
        }

        public StdUIntVector GetAddedItems()
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetAddedItems(swigCPtr), false);
            return ret;
        }

        public StdUIntVector GetPrependedItems()
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetPrependedItems(swigCPtr), false);
            return ret;
        }

        public StdUIntVector GetAppendedItems()
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetAppendedItems(swigCPtr), false);
            return ret;
        }

        public StdUIntVector GetDeletedItems()
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetDeletedItems(swigCPtr), false);
            return ret;
        }

        public StdUIntVector GetOrderedItems()
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetOrderedItems(swigCPtr), false);
            return ret;
        }

        public StdUIntVector GetItems(SdfListOpType type)
        {
            StdUIntVector ret = new StdUIntVector(UsdCsPINVOKE.SdfUIntListOp_GetItems(swigCPtr, (int)type), false);
            return ret;
        }

        public void SetExplicitItems(StdUIntVector items)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetExplicitItems(swigCPtr, StdUIntVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAddedItems(StdUIntVector items)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetAddedItems(swigCPtr, StdUIntVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetPrependedItems(StdUIntVector items)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetPrependedItems(swigCPtr, StdUIntVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAppendedItems(StdUIntVector items)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetAppendedItems(swigCPtr, StdUIntVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetDeletedItems(StdUIntVector items)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetDeletedItems(swigCPtr, StdUIntVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetOrderedItems(StdUIntVector items)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetOrderedItems(swigCPtr, StdUIntVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetItems(StdUIntVector items, SdfListOpType type)
        {
            UsdCsPINVOKE.SdfUIntListOp_SetItems(swigCPtr, StdUIntVector.getCPtr(items), (int)type);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Clear()
        {
            UsdCsPINVOKE.SdfUIntListOp_Clear(swigCPtr);
        }

        public void ClearAndMakeExplicit()
        {
            UsdCsPINVOKE.SdfUIntListOp_ClearAndMakeExplicit(swigCPtr);
        }

        public bool ReplaceOperations(SdfListOpType op, uint index, uint n, StdUIntVector newItems)
        {
            bool ret = UsdCsPINVOKE.SdfUIntListOp_ReplaceOperations(swigCPtr, (int)op, index, n, StdUIntVector.getCPtr(newItems));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ComposeOperations(SdfUIntListOp stronger, SdfListOpType op)
        {
            UsdCsPINVOKE.SdfUIntListOp_ComposeOperations(swigCPtr, SdfUIntListOp.getCPtr(stronger), (int)op);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }
    }
}
