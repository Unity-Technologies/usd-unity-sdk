//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfPrimSpec : SdfSpec
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal SdfPrimSpec(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.SdfPrimSpec_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfPrimSpec obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfPrimSpec()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfPrimSpec(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public static SdfPrimSpecHandle New(SdfLayerHandle parentLayer, string name, SdfSpecifier spec, string typeName)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_New__SWIG_0(SdfLayerHandle.getCPtr(parentLayer), name, (int)spec, typeName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfPrimSpecHandle New(SdfLayerHandle parentLayer, string name, SdfSpecifier spec)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_New__SWIG_1(SdfLayerHandle.getCPtr(parentLayer), name, (int)spec), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfPrimSpecHandle New(SdfPrimSpecHandle parentPrim, string name, SdfSpecifier spec, string typeName)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_New__SWIG_2(SdfPrimSpecHandle.getCPtr(parentPrim), name, (int)spec, typeName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfPrimSpecHandle New(SdfPrimSpecHandle parentPrim, string name, SdfSpecifier spec)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_New__SWIG_3(SdfPrimSpecHandle.getCPtr(parentPrim), name, (int)spec), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string GetName()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpec_GetName(swigCPtr);
            return ret;
        }

        public TfToken GetNameToken()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpec_GetNameToken(swigCPtr), true);
            return ret;
        }

        public bool CanSetName(string newName, SWIGTYPE_p_std__string whyNot)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_CanSetName(swigCPtr, newName, SWIGTYPE_p_std__string.getCPtr(whyNot));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetName(string newName, bool validate)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_SetName__SWIG_0(swigCPtr, newName, validate);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetName(string newName)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_SetName__SWIG_1(swigCPtr, newName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool IsValidName(string name)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_IsValidName(name);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle GetNameRoot()
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetNameRoot(swigCPtr), true);
            return ret;
        }

        public SdfPrimSpecHandle GetNameParent()
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetNameParent(swigCPtr), true);
            return ret;
        }

        public SdfPrimSpecHandle GetRealNameParent()
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetRealNameParent(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_SdfPrimSpecView GetNameChildren()
        {
            SWIGTYPE_p_SdfPrimSpecView ret = new SWIGTYPE_p_SdfPrimSpecView(UsdCsPINVOKE.SdfPrimSpec_GetNameChildren(swigCPtr), true);
            return ret;
        }

        public void SetNameChildren(SdfPrimSpecHandleVector arg0)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetNameChildren(swigCPtr, SdfPrimSpecHandleVector.getCPtr(arg0));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool InsertNameChild(SdfPrimSpecHandle child, int index)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_InsertNameChild__SWIG_0(swigCPtr, SdfPrimSpecHandle.getCPtr(child), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool InsertNameChild(SdfPrimSpecHandle child)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_InsertNameChild__SWIG_1(swigCPtr, SdfPrimSpecHandle.getCPtr(child));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool RemoveNameChild(SdfPrimSpecHandle child)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_RemoveNameChild(swigCPtr, SdfPrimSpecHandle.getCPtr(child));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool HasNameChildrenOrder()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasNameChildrenOrder(swigCPtr);
            return ret;
        }

        public void SetNameChildrenOrder(TfTokenVector names)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetNameChildrenOrder(swigCPtr, TfTokenVector.getCPtr(names));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInNameChildrenOrder(TfToken name, int index)
        {
            UsdCsPINVOKE.SdfPrimSpec_InsertInNameChildrenOrder__SWIG_0(swigCPtr, TfToken.getCPtr(name), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInNameChildrenOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpec_InsertInNameChildrenOrder__SWIG_1(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromNameChildrenOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpec_RemoveFromNameChildrenOrder(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromNameChildrenOrderByIndex(int index)
        {
            UsdCsPINVOKE.SdfPrimSpec_RemoveFromNameChildrenOrderByIndex(swigCPtr, index);
        }

        public void ApplyNameChildrenOrder(TfTokenVector vec)
        {
            UsdCsPINVOKE.SdfPrimSpec_ApplyNameChildrenOrder(swigCPtr, TfTokenVector.getCPtr(vec));
        }

        public SWIGTYPE_p_SdfPropertySpecView GetProperties()
        {
            SWIGTYPE_p_SdfPropertySpecView ret = new SWIGTYPE_p_SdfPropertySpecView(UsdCsPINVOKE.SdfPrimSpec_GetProperties(swigCPtr), true);
            return ret;
        }

        public void SetProperties(SdfPropertySpecHandleVector arg0)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetProperties(swigCPtr, SdfPropertySpecHandleVector.getCPtr(arg0));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool InsertProperty(SdfPropertySpecHandle property, int index)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_InsertProperty__SWIG_0(swigCPtr, SdfPropertySpecHandle.getCPtr(property), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool InsertProperty(SdfPropertySpecHandle property)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_InsertProperty__SWIG_1(swigCPtr, SdfPropertySpecHandle.getCPtr(property));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void RemoveProperty(SdfPropertySpecHandle property)
        {
            UsdCsPINVOKE.SdfPrimSpec_RemoveProperty(swigCPtr, SdfPropertySpecHandle.getCPtr(property));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasPropertyOrder()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasPropertyOrder(swigCPtr);
            return ret;
        }

        public void SetPropertyOrder(TfTokenVector names)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetPropertyOrder(swigCPtr, TfTokenVector.getCPtr(names));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInPropertyOrder(TfToken name, int index)
        {
            UsdCsPINVOKE.SdfPrimSpec_InsertInPropertyOrder__SWIG_0(swigCPtr, TfToken.getCPtr(name), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInPropertyOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpec_InsertInPropertyOrder__SWIG_1(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromPropertyOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpec_RemoveFromPropertyOrder(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromPropertyOrderByIndex(int index)
        {
            UsdCsPINVOKE.SdfPrimSpec_RemoveFromPropertyOrderByIndex(swigCPtr, index);
        }

        public void ApplyPropertyOrder(TfTokenVector vec)
        {
            UsdCsPINVOKE.SdfPrimSpec_ApplyPropertyOrder(swigCPtr, TfTokenVector.getCPtr(vec));
        }

        public SdfSpecHandle GetObjectAtPath(SdfPath path)
        {
            SdfSpecHandle ret = new SdfSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetObjectAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle GetPrimAtPath(SdfPath path)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetPrimAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPropertySpecHandle GetPropertyAtPath(SdfPath path)
        {
            SdfPropertySpecHandle ret = new SdfPropertySpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetPropertyAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfAttributeSpecHandle GetAttributeAtPath(SdfPath path)
        {
            SdfAttributeSpecHandle ret = new SdfAttributeSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetAttributeAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfRelationshipSpecHandle GetRelationshipAtPath(SdfPath path)
        {
            SdfRelationshipSpecHandle ret = new SdfRelationshipSpecHandle(UsdCsPINVOKE.SdfPrimSpec_GetRelationshipAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfToken GetTypeName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpec_GetTypeName(swigCPtr), true);
            return ret;
        }

        public void SetTypeName(string value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetTypeName(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetComment()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpec_GetComment(swigCPtr);
            return ret;
        }

        public void SetComment(string value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetComment(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetDocumentation()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpec_GetDocumentation(swigCPtr);
            return ret;
        }

        public void SetDocumentation(string value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetDocumentation(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool GetActive()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_GetActive(swigCPtr);
            return ret;
        }

        public void SetActive(bool value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetActive(swigCPtr, value);
        }

        public bool HasActive()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasActive(swigCPtr);
            return ret;
        }

        public void ClearActive()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearActive(swigCPtr);
        }

        public bool GetHidden()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_GetHidden(swigCPtr);
            return ret;
        }

        public void SetHidden(bool value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetHidden(swigCPtr, value);
        }

        public TfToken GetKind()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpec_GetKind(swigCPtr), true);
            return ret;
        }

        public void SetKind(TfToken value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetKind(swigCPtr, TfToken.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasKind()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasKind(swigCPtr);
            return ret;
        }

        public void ClearKind()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearKind(swigCPtr);
        }

        public TfToken GetSymmetryFunction()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpec_GetSymmetryFunction(swigCPtr), true);
            return ret;
        }

        public void SetSymmetryFunction(TfToken functionName)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetSymmetryFunction(swigCPtr, TfToken.getCPtr(functionName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfDictionaryProxy GetSymmetryArguments()
        {
            SWIGTYPE_p_SdfDictionaryProxy ret = new SWIGTYPE_p_SdfDictionaryProxy(UsdCsPINVOKE.SdfPrimSpec_GetSymmetryArguments(swigCPtr), true);
            return ret;
        }

        public void SetSymmetryArgument(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetSymmetryArgument(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetSymmetricPeer()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpec_GetSymmetricPeer(swigCPtr);
            return ret;
        }

        public void SetSymmetricPeer(string peerName)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetSymmetricPeer(swigCPtr, peerName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetPrefix()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpec_GetPrefix(swigCPtr);
            return ret;
        }

        public void SetPrefix(string value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetPrefix(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetSuffix()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpec_GetSuffix(swigCPtr);
            return ret;
        }

        public void SetSuffix(string value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetSuffix(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfDictionaryProxy GetCustomData()
        {
            SWIGTYPE_p_SdfDictionaryProxy ret = new SWIGTYPE_p_SdfDictionaryProxy(UsdCsPINVOKE.SdfPrimSpec_GetCustomData(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_SdfDictionaryProxy GetAssetInfo()
        {
            SWIGTYPE_p_SdfDictionaryProxy ret = new SWIGTYPE_p_SdfDictionaryProxy(UsdCsPINVOKE.SdfPrimSpec_GetAssetInfo(swigCPtr), true);
            return ret;
        }

        public void SetCustomData(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetCustomData(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAssetInfo(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetAssetInfo(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfSpecifier GetSpecifier()
        {
            SdfSpecifier ret = (SdfSpecifier)UsdCsPINVOKE.SdfPrimSpec_GetSpecifier(swigCPtr);
            return ret;
        }

        public void SetSpecifier(SdfSpecifier value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetSpecifier(swigCPtr, (int)value);
        }

        public SdfPermission GetPermission()
        {
            SdfPermission ret = (SdfPermission)UsdCsPINVOKE.SdfPrimSpec_GetPermission(swigCPtr);
            return ret;
        }

        public void SetPermission(SdfPermission value)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetPermission(swigCPtr, (int)value);
        }

        public VtDictionary GetPrefixSubstitutions()
        {
            VtDictionary ret = new VtDictionary(UsdCsPINVOKE.SdfPrimSpec_GetPrefixSubstitutions(swigCPtr), true);
            return ret;
        }

        public void SetPrefixSubstitutions(VtDictionary prefixSubstitutions)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetPrefixSubstitutions(swigCPtr, VtDictionary.getCPtr(prefixSubstitutions));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public VtDictionary GetSuffixSubstitutions()
        {
            VtDictionary ret = new VtDictionary(UsdCsPINVOKE.SdfPrimSpec_GetSuffixSubstitutions(swigCPtr), true);
            return ret;
        }

        public void SetSuffixSubstitutions(VtDictionary suffixSubstitutions)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetSuffixSubstitutions(swigCPtr, VtDictionary.getCPtr(suffixSubstitutions));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetInstanceable(bool instanceable)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetInstanceable(swigCPtr, instanceable);
        }

        public bool GetInstanceable()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_GetInstanceable(swigCPtr);
            return ret;
        }

        public bool HasInstanceable()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasInstanceable(swigCPtr);
            return ret;
        }

        public void ClearInstanceable()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearInstanceable(swigCPtr);
        }

        public SWIGTYPE_p_SdfPayloadsProxy GetPayloadList()
        {
            SWIGTYPE_p_SdfPayloadsProxy ret = new SWIGTYPE_p_SdfPayloadsProxy(UsdCsPINVOKE.SdfPrimSpec_GetPayloadList(swigCPtr), true);
            return ret;
        }

        public bool HasPayloads()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasPayloads(swigCPtr);
            return ret;
        }

        public void ClearPayloadList()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearPayloadList(swigCPtr);
        }

        public SWIGTYPE_p_SdfInheritsProxy GetInheritPathList()
        {
            SWIGTYPE_p_SdfInheritsProxy ret = new SWIGTYPE_p_SdfInheritsProxy(UsdCsPINVOKE.SdfPrimSpec_GetInheritPathList(swigCPtr), true);
            return ret;
        }

        public bool HasInheritPaths()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasInheritPaths(swigCPtr);
            return ret;
        }

        public void ClearInheritPathList()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearInheritPathList(swigCPtr);
        }

        public SWIGTYPE_p_SdfSpecializesProxy GetSpecializesList()
        {
            SWIGTYPE_p_SdfSpecializesProxy ret = new SWIGTYPE_p_SdfSpecializesProxy(UsdCsPINVOKE.SdfPrimSpec_GetSpecializesList(swigCPtr), true);
            return ret;
        }

        public bool HasSpecializes()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasSpecializes(swigCPtr);
            return ret;
        }

        public void ClearSpecializesList()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearSpecializesList(swigCPtr);
        }

        public SWIGTYPE_p_SdfReferencesProxy GetReferenceList()
        {
            SWIGTYPE_p_SdfReferencesProxy ret = new SWIGTYPE_p_SdfReferencesProxy(UsdCsPINVOKE.SdfPrimSpec_GetReferenceList(swigCPtr), true);
            return ret;
        }

        public bool HasReferences()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasReferences(swigCPtr);
            return ret;
        }

        public void ClearReferenceList()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearReferenceList(swigCPtr);
        }

        public SWIGTYPE_p_SdfVariantSetNamesProxy GetVariantSetNameList()
        {
            SWIGTYPE_p_SdfVariantSetNamesProxy ret = new SWIGTYPE_p_SdfVariantSetNamesProxy(UsdCsPINVOKE.SdfPrimSpec_GetVariantSetNameList(swigCPtr), true);
            return ret;
        }

        public bool HasVariantSetNames()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasVariantSetNames(swigCPtr);
            return ret;
        }

        public StdStringVector GetVariantNames(string name)
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.SdfPrimSpec_GetVariantNames(swigCPtr, name), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void RemoveVariantSet(string name)
        {
            UsdCsPINVOKE.SdfPrimSpec_RemoveVariantSet(swigCPtr, name);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfVariantSelectionProxy GetVariantSelections()
        {
            SWIGTYPE_p_SdfVariantSelectionProxy ret = new SWIGTYPE_p_SdfVariantSelectionProxy(UsdCsPINVOKE.SdfPrimSpec_GetVariantSelections(swigCPtr), true);
            return ret;
        }

        public void SetVariantSelection(string variantSetName, string variantName)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetVariantSelection(swigCPtr, variantSetName, variantName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfRelocatesMapProxy GetRelocates()
        {
            SWIGTYPE_p_SdfRelocatesMapProxy ret = new SWIGTYPE_p_SdfRelocatesMapProxy(UsdCsPINVOKE.SdfPrimSpec_GetRelocates(swigCPtr), true);
            return ret;
        }

        public void SetRelocates(SWIGTYPE_p_std__mapT_SdfPath_SdfPath_std__lessT_SdfPath_t_t newMap)
        {
            UsdCsPINVOKE.SdfPrimSpec_SetRelocates(swigCPtr, SWIGTYPE_p_std__mapT_SdfPath_SdfPath_std__lessT_SdfPath_t_t.getCPtr(newMap));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasRelocates()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpec_HasRelocates(swigCPtr);
            return ret;
        }

        public void ClearRelocates()
        {
            UsdCsPINVOKE.SdfPrimSpec_ClearRelocates(swigCPtr);
        }
    }
}
