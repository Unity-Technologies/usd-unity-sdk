//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfPrimSpecHandle : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfPrimSpecHandle(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfPrimSpecHandle obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfPrimSpecHandle()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfPrimSpecHandle(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public SdfPrimSpecHandle() : this(UsdCsPINVOKE.new_SdfPrimSpecHandle__SWIG_0(), true)
        {
        }

        public SdfPrimSpecHandle(SdfPrimSpec spec) : this(UsdCsPINVOKE.new_SdfPrimSpecHandle__SWIG_1(SdfPrimSpec.getCPtr(spec)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfPrimSpecHandle(SdfPrimSpecHandle handle) : this(UsdCsPINVOKE.new_SdfPrimSpecHandle__SWIG_2(SdfPrimSpecHandle.getCPtr(handle)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfPrimSpec __deref__()
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.SdfPrimSpecHandle___deref__(swigCPtr);
            SdfPrimSpec ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdfPrimSpec(cPtr, false);
            return ret;
        }

        public SdfPrimSpecHandle New(SdfLayerHandle parentLayer, string name, SdfSpecifier spec, string typeName)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_New__SWIG_0(swigCPtr, SdfLayerHandle.getCPtr(parentLayer), name, (int)spec, typeName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle New(SdfLayerHandle parentLayer, string name, SdfSpecifier spec)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_New__SWIG_1(swigCPtr, SdfLayerHandle.getCPtr(parentLayer), name, (int)spec), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle New(SdfPrimSpecHandle parentPrim, string name, SdfSpecifier spec, string typeName)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_New__SWIG_2(swigCPtr, SdfPrimSpecHandle.getCPtr(parentPrim), name, (int)spec, typeName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle New(SdfPrimSpecHandle parentPrim, string name, SdfSpecifier spec)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_New__SWIG_3(swigCPtr, SdfPrimSpecHandle.getCPtr(parentPrim), name, (int)spec), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string GetName()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetName(swigCPtr);
            return ret;
        }

        public TfToken GetNameToken()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpecHandle_GetNameToken(swigCPtr), true);
            return ret;
        }

        public bool CanSetName(string newName, SWIGTYPE_p_std__string whyNot)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_CanSetName(swigCPtr, newName, SWIGTYPE_p_std__string.getCPtr(whyNot));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetName(string newName, bool validate)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_SetName__SWIG_0(swigCPtr, newName, validate);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetName(string newName)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_SetName__SWIG_1(swigCPtr, newName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsValidName(string name)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_IsValidName(swigCPtr, name);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle GetNameRoot()
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetNameRoot(swigCPtr), true);
            return ret;
        }

        public SdfPrimSpecHandle GetNameParent()
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetNameParent(swigCPtr), true);
            return ret;
        }

        public SdfPrimSpecHandle GetRealNameParent()
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetRealNameParent(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_SdfPrimSpecView GetNameChildren()
        {
            SWIGTYPE_p_SdfPrimSpecView ret = new SWIGTYPE_p_SdfPrimSpecView(UsdCsPINVOKE.SdfPrimSpecHandle_GetNameChildren(swigCPtr), true);
            return ret;
        }

        public void SetNameChildren(SdfPrimSpecHandleVector arg0)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetNameChildren(swigCPtr, SdfPrimSpecHandleVector.getCPtr(arg0));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool InsertNameChild(SdfPrimSpecHandle child, int index)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_InsertNameChild__SWIG_0(swigCPtr, SdfPrimSpecHandle.getCPtr(child), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool InsertNameChild(SdfPrimSpecHandle child)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_InsertNameChild__SWIG_1(swigCPtr, SdfPrimSpecHandle.getCPtr(child));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool RemoveNameChild(SdfPrimSpecHandle child)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_RemoveNameChild(swigCPtr, SdfPrimSpecHandle.getCPtr(child));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool HasNameChildrenOrder()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasNameChildrenOrder(swigCPtr);
            return ret;
        }

        public void SetNameChildrenOrder(TfTokenVector names)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetNameChildrenOrder(swigCPtr, TfTokenVector.getCPtr(names));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInNameChildrenOrder(TfToken name, int index)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_InsertInNameChildrenOrder__SWIG_0(swigCPtr, TfToken.getCPtr(name), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInNameChildrenOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_InsertInNameChildrenOrder__SWIG_1(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromNameChildrenOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_RemoveFromNameChildrenOrder(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromNameChildrenOrderByIndex(int index)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_RemoveFromNameChildrenOrderByIndex(swigCPtr, index);
        }

        public void ApplyNameChildrenOrder(TfTokenVector vec)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ApplyNameChildrenOrder(swigCPtr, TfTokenVector.getCPtr(vec));
        }

        public SWIGTYPE_p_SdfPropertySpecView GetProperties()
        {
            SWIGTYPE_p_SdfPropertySpecView ret = new SWIGTYPE_p_SdfPropertySpecView(UsdCsPINVOKE.SdfPrimSpecHandle_GetProperties(swigCPtr), true);
            return ret;
        }

        public void SetProperties(SdfPropertySpecHandleVector arg0)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetProperties(swigCPtr, SdfPropertySpecHandleVector.getCPtr(arg0));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool InsertProperty(SdfPropertySpecHandle property, int index)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_InsertProperty__SWIG_0(swigCPtr, SdfPropertySpecHandle.getCPtr(property), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool InsertProperty(SdfPropertySpecHandle property)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_InsertProperty__SWIG_1(swigCPtr, SdfPropertySpecHandle.getCPtr(property));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void RemoveProperty(SdfPropertySpecHandle property)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_RemoveProperty(swigCPtr, SdfPropertySpecHandle.getCPtr(property));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasPropertyOrder()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasPropertyOrder(swigCPtr);
            return ret;
        }

        public void SetPropertyOrder(TfTokenVector names)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetPropertyOrder(swigCPtr, TfTokenVector.getCPtr(names));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInPropertyOrder(TfToken name, int index)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_InsertInPropertyOrder__SWIG_0(swigCPtr, TfToken.getCPtr(name), index);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void InsertInPropertyOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_InsertInPropertyOrder__SWIG_1(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromPropertyOrder(TfToken name)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_RemoveFromPropertyOrder(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void RemoveFromPropertyOrderByIndex(int index)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_RemoveFromPropertyOrderByIndex(swigCPtr, index);
        }

        public void ApplyPropertyOrder(TfTokenVector vec)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ApplyPropertyOrder(swigCPtr, TfTokenVector.getCPtr(vec));
        }

        public SdfSpecHandle GetObjectAtPath(SdfPath path)
        {
            SdfSpecHandle ret = new SdfSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetObjectAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPrimSpecHandle GetPrimAtPath(SdfPath path)
        {
            SdfPrimSpecHandle ret = new SdfPrimSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetPrimAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfPropertySpecHandle GetPropertyAtPath(SdfPath path)
        {
            SdfPropertySpecHandle ret = new SdfPropertySpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetPropertyAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfAttributeSpecHandle GetAttributeAtPath(SdfPath path)
        {
            SdfAttributeSpecHandle ret = new SdfAttributeSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetAttributeAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdfRelationshipSpecHandle GetRelationshipAtPath(SdfPath path)
        {
            SdfRelationshipSpecHandle ret = new SdfRelationshipSpecHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetRelationshipAtPath(swigCPtr, SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfToken GetTypeName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpecHandle_GetTypeName(swigCPtr), true);
            return ret;
        }

        public void SetTypeName(string value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetTypeName(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetComment()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetComment(swigCPtr);
            return ret;
        }

        public void SetComment(string value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetComment(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetDocumentation()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetDocumentation(swigCPtr);
            return ret;
        }

        public void SetDocumentation(string value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetDocumentation(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool GetActive()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetActive(swigCPtr);
            return ret;
        }

        public void SetActive(bool value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetActive(swigCPtr, value);
        }

        public bool HasActive()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasActive(swigCPtr);
            return ret;
        }

        public void ClearActive()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearActive(swigCPtr);
        }

        public bool GetHidden()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetHidden(swigCPtr);
            return ret;
        }

        public void SetHidden(bool value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetHidden(swigCPtr, value);
        }

        public TfToken GetKind()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpecHandle_GetKind(swigCPtr), true);
            return ret;
        }

        public void SetKind(TfToken value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetKind(swigCPtr, TfToken.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasKind()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasKind(swigCPtr);
            return ret;
        }

        public void ClearKind()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearKind(swigCPtr);
        }

        public TfToken GetSymmetryFunction()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpecHandle_GetSymmetryFunction(swigCPtr), true);
            return ret;
        }

        public void SetSymmetryFunction(TfToken functionName)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetSymmetryFunction(swigCPtr, TfToken.getCPtr(functionName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfDictionaryProxy GetSymmetryArguments()
        {
            SWIGTYPE_p_SdfDictionaryProxy ret = new SWIGTYPE_p_SdfDictionaryProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetSymmetryArguments(swigCPtr), true);
            return ret;
        }

        public void SetSymmetryArgument(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetSymmetryArgument(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetSymmetricPeer()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetSymmetricPeer(swigCPtr);
            return ret;
        }

        public void SetSymmetricPeer(string peerName)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetSymmetricPeer(swigCPtr, peerName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetPrefix()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetPrefix(swigCPtr);
            return ret;
        }

        public void SetPrefix(string value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetPrefix(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetSuffix()
        {
            string ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetSuffix(swigCPtr);
            return ret;
        }

        public void SetSuffix(string value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetSuffix(swigCPtr, value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfDictionaryProxy GetCustomData()
        {
            SWIGTYPE_p_SdfDictionaryProxy ret = new SWIGTYPE_p_SdfDictionaryProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetCustomData(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_SdfDictionaryProxy GetAssetInfo()
        {
            SWIGTYPE_p_SdfDictionaryProxy ret = new SWIGTYPE_p_SdfDictionaryProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetAssetInfo(swigCPtr), true);
            return ret;
        }

        public void SetCustomData(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetCustomData(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAssetInfo(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetAssetInfo(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfSpecifier GetSpecifier()
        {
            SdfSpecifier ret = (SdfSpecifier)UsdCsPINVOKE.SdfPrimSpecHandle_GetSpecifier(swigCPtr);
            return ret;
        }

        public void SetSpecifier(SdfSpecifier value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetSpecifier(swigCPtr, (int)value);
        }

        public SdfPermission GetPermission()
        {
            SdfPermission ret = (SdfPermission)UsdCsPINVOKE.SdfPrimSpecHandle_GetPermission(swigCPtr);
            return ret;
        }

        public void SetPermission(SdfPermission value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetPermission(swigCPtr, (int)value);
        }

        public VtDictionary GetPrefixSubstitutions()
        {
            VtDictionary ret = new VtDictionary(UsdCsPINVOKE.SdfPrimSpecHandle_GetPrefixSubstitutions(swigCPtr), true);
            return ret;
        }

        public void SetPrefixSubstitutions(VtDictionary prefixSubstitutions)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetPrefixSubstitutions(swigCPtr, VtDictionary.getCPtr(prefixSubstitutions));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public VtDictionary GetSuffixSubstitutions()
        {
            VtDictionary ret = new VtDictionary(UsdCsPINVOKE.SdfPrimSpecHandle_GetSuffixSubstitutions(swigCPtr), true);
            return ret;
        }

        public void SetSuffixSubstitutions(VtDictionary suffixSubstitutions)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetSuffixSubstitutions(swigCPtr, VtDictionary.getCPtr(suffixSubstitutions));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetInstanceable(bool instanceable)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetInstanceable(swigCPtr, instanceable);
        }

        public bool GetInstanceable()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_GetInstanceable(swigCPtr);
            return ret;
        }

        public bool HasInstanceable()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasInstanceable(swigCPtr);
            return ret;
        }

        public void ClearInstanceable()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearInstanceable(swigCPtr);
        }

        public SWIGTYPE_p_SdfPayloadsProxy GetPayloadList()
        {
            SWIGTYPE_p_SdfPayloadsProxy ret = new SWIGTYPE_p_SdfPayloadsProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetPayloadList(swigCPtr), true);
            return ret;
        }

        public bool HasPayloads()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasPayloads(swigCPtr);
            return ret;
        }

        public void ClearPayloadList()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearPayloadList(swigCPtr);
        }

        public SWIGTYPE_p_SdfInheritsProxy GetInheritPathList()
        {
            SWIGTYPE_p_SdfInheritsProxy ret = new SWIGTYPE_p_SdfInheritsProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetInheritPathList(swigCPtr), true);
            return ret;
        }

        public bool HasInheritPaths()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasInheritPaths(swigCPtr);
            return ret;
        }

        public void ClearInheritPathList()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearInheritPathList(swigCPtr);
        }

        public SWIGTYPE_p_SdfSpecializesProxy GetSpecializesList()
        {
            SWIGTYPE_p_SdfSpecializesProxy ret = new SWIGTYPE_p_SdfSpecializesProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetSpecializesList(swigCPtr), true);
            return ret;
        }

        public bool HasSpecializes()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasSpecializes(swigCPtr);
            return ret;
        }

        public void ClearSpecializesList()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearSpecializesList(swigCPtr);
        }

        public SWIGTYPE_p_SdfReferencesProxy GetReferenceList()
        {
            SWIGTYPE_p_SdfReferencesProxy ret = new SWIGTYPE_p_SdfReferencesProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetReferenceList(swigCPtr), true);
            return ret;
        }

        public bool HasReferences()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasReferences(swigCPtr);
            return ret;
        }

        public void ClearReferenceList()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearReferenceList(swigCPtr);
        }

        public SWIGTYPE_p_SdfVariantSetNamesProxy GetVariantSetNameList()
        {
            SWIGTYPE_p_SdfVariantSetNamesProxy ret = new SWIGTYPE_p_SdfVariantSetNamesProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetVariantSetNameList(swigCPtr), true);
            return ret;
        }

        public bool HasVariantSetNames()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasVariantSetNames(swigCPtr);
            return ret;
        }

        public StdStringVector GetVariantNames(string name)
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.SdfPrimSpecHandle_GetVariantNames(swigCPtr, name), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void RemoveVariantSet(string name)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_RemoveVariantSet(swigCPtr, name);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfVariantSelectionProxy GetVariantSelections()
        {
            SWIGTYPE_p_SdfVariantSelectionProxy ret = new SWIGTYPE_p_SdfVariantSelectionProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetVariantSelections(swigCPtr), true);
            return ret;
        }

        public void SetVariantSelection(string variantSetName, string variantName)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetVariantSelection(swigCPtr, variantSetName, variantName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SWIGTYPE_p_SdfRelocatesMapProxy GetRelocates()
        {
            SWIGTYPE_p_SdfRelocatesMapProxy ret = new SWIGTYPE_p_SdfRelocatesMapProxy(UsdCsPINVOKE.SdfPrimSpecHandle_GetRelocates(swigCPtr), true);
            return ret;
        }

        public void SetRelocates(SWIGTYPE_p_std__mapT_SdfPath_SdfPath_std__lessT_SdfPath_t_t newMap)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetRelocates(swigCPtr, SWIGTYPE_p_std__mapT_SdfPath_SdfPath_std__lessT_SdfPath_t_t.getCPtr(newMap));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasRelocates()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasRelocates(swigCPtr);
            return ret;
        }

        public void ClearRelocates()
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearRelocates(swigCPtr);
        }

        public SWIGTYPE_p_SdfSchemaBase GetSchema()
        {
            SWIGTYPE_p_SdfSchemaBase ret = new SWIGTYPE_p_SdfSchemaBase(UsdCsPINVOKE.SdfPrimSpecHandle_GetSchema(swigCPtr), false);
            return ret;
        }

        public SdfSpecType GetSpecType()
        {
            SdfSpecType ret = (SdfSpecType)UsdCsPINVOKE.SdfPrimSpecHandle_GetSpecType(swigCPtr);
            return ret;
        }

        public bool IsDormant()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_IsDormant(swigCPtr);
            return ret;
        }

        public SdfLayerHandle GetLayer()
        {
            SdfLayerHandle ret = new SdfLayerHandle(UsdCsPINVOKE.SdfPrimSpecHandle_GetLayer(swigCPtr), true);
            return ret;
        }

        public SdfPath GetPath()
        {
            SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfPrimSpecHandle_GetPath(swigCPtr), true);
            return ret;
        }

        public bool PermissionToEdit()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_PermissionToEdit(swigCPtr);
            return ret;
        }

        public TfTokenVector ListInfoKeys()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfPrimSpecHandle_ListInfoKeys(swigCPtr), true);
            return ret;
        }

        public TfTokenVector GetMetaDataInfoKeys()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfPrimSpecHandle_GetMetaDataInfoKeys(swigCPtr), true);
            return ret;
        }

        public TfToken GetMetaDataDisplayGroup(TfToken key)
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfPrimSpecHandle_GetMetaDataDisplayGroup(swigCPtr, TfToken.getCPtr(key)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetInfo(TfToken key)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.SdfPrimSpecHandle_GetInfo(swigCPtr, TfToken.getCPtr(key)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void SetInfo(TfToken key, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetInfo(swigCPtr, TfToken.getCPtr(key), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetInfoDictionaryValue(TfToken dictionaryKey, TfToken entryKey, VtValue value)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_SetInfoDictionaryValue(swigCPtr, TfToken.getCPtr(dictionaryKey), TfToken.getCPtr(entryKey), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasInfo(TfToken key)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasInfo(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ClearInfo(TfToken key)
        {
            UsdCsPINVOKE.SdfPrimSpecHandle_ClearInfo(swigCPtr, TfToken.getCPtr(key));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public TfType GetTypeForInfo(TfToken key)
        {
            TfType ret = new TfType(UsdCsPINVOKE.SdfPrimSpecHandle_GetTypeForInfo(swigCPtr, TfToken.getCPtr(key)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetFallbackForInfo(TfToken key)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.SdfPrimSpecHandle_GetFallbackForInfo(swigCPtr, TfToken.getCPtr(key)), false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool WriteToStream(SWIGTYPE_p_std__ostream arg0, uint indent)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_WriteToStream__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(arg0), indent);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool WriteToStream(SWIGTYPE_p_std__ostream arg0)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_WriteToStream__SWIG_1(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(arg0));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsInert(bool ignoreChildren)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_IsInert__SWIG_0(swigCPtr, ignoreChildren);
            return ret;
        }

        public bool IsInert()
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_IsInert__SWIG_1(swigCPtr);
            return ret;
        }

        public TfTokenVector ListFields()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdfPrimSpecHandle_ListFields(swigCPtr), true);
            return ret;
        }

        public bool HasField(TfToken name)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_HasField(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue GetField(TfToken name)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.SdfPrimSpecHandle_GetField(swigCPtr, TfToken.getCPtr(name)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetField(TfToken name, VtValue value)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_SetField(swigCPtr, TfToken.getCPtr(name), VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ClearField(TfToken name)
        {
            bool ret = UsdCsPINVOKE.SdfPrimSpecHandle_ClearField(swigCPtr, TfToken.getCPtr(name));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }
}
