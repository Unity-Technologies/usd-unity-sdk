//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfUnregisteredValueListOp : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfUnregisteredValueListOp(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfUnregisteredValueListOp obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfUnregisteredValueListOp()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfUnregisteredValueListOp(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public static SdfUnregisteredValueListOp CreateExplicit(StdUnregisteredValueVector explicitItems)
        {
            SdfUnregisteredValueListOp ret = new SdfUnregisteredValueListOp(UsdCsPINVOKE.SdfUnregisteredValueListOp_CreateExplicit__SWIG_0(StdUnregisteredValueVector.getCPtr(explicitItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUnregisteredValueListOp CreateExplicit()
        {
            SdfUnregisteredValueListOp ret = new SdfUnregisteredValueListOp(UsdCsPINVOKE.SdfUnregisteredValueListOp_CreateExplicit__SWIG_1(), true);
            return ret;
        }

        public static SdfUnregisteredValueListOp Create(StdUnregisteredValueVector prependedItems, StdUnregisteredValueVector appendedItems, StdUnregisteredValueVector deletedItems)
        {
            SdfUnregisteredValueListOp ret = new SdfUnregisteredValueListOp(UsdCsPINVOKE.SdfUnregisteredValueListOp_Create__SWIG_0(StdUnregisteredValueVector.getCPtr(prependedItems), StdUnregisteredValueVector.getCPtr(appendedItems), StdUnregisteredValueVector.getCPtr(deletedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUnregisteredValueListOp Create(StdUnregisteredValueVector prependedItems, StdUnregisteredValueVector appendedItems)
        {
            SdfUnregisteredValueListOp ret = new SdfUnregisteredValueListOp(UsdCsPINVOKE.SdfUnregisteredValueListOp_Create__SWIG_1(StdUnregisteredValueVector.getCPtr(prependedItems), StdUnregisteredValueVector.getCPtr(appendedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUnregisteredValueListOp Create(StdUnregisteredValueVector prependedItems)
        {
            SdfUnregisteredValueListOp ret = new SdfUnregisteredValueListOp(UsdCsPINVOKE.SdfUnregisteredValueListOp_Create__SWIG_2(StdUnregisteredValueVector.getCPtr(prependedItems)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfUnregisteredValueListOp Create()
        {
            SdfUnregisteredValueListOp ret = new SdfUnregisteredValueListOp(UsdCsPINVOKE.SdfUnregisteredValueListOp_Create__SWIG_3(), true);
            return ret;
        }

        public SdfUnregisteredValueListOp() : this(UsdCsPINVOKE.new_SdfUnregisteredValueListOp(), true)
        {
        }

        public void Swap(SdfUnregisteredValueListOp rhs)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_Swap(swigCPtr, SdfUnregisteredValueListOp.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasKeys()
        {
            bool ret = UsdCsPINVOKE.SdfUnregisteredValueListOp_HasKeys(swigCPtr);
            return ret;
        }

        public bool HasItem(SdfUnregisteredValue item)
        {
            bool ret = UsdCsPINVOKE.SdfUnregisteredValueListOp_HasItem(swigCPtr, SdfUnregisteredValue.getCPtr(item));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsExplicit()
        {
            bool ret = UsdCsPINVOKE.SdfUnregisteredValueListOp_IsExplicit(swigCPtr);
            return ret;
        }

        public StdUnregisteredValueVector GetExplicitItems()
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetExplicitItems(swigCPtr), false);
            return ret;
        }

        public StdUnregisteredValueVector GetAddedItems()
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetAddedItems(swigCPtr), false);
            return ret;
        }

        public StdUnregisteredValueVector GetPrependedItems()
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetPrependedItems(swigCPtr), false);
            return ret;
        }

        public StdUnregisteredValueVector GetAppendedItems()
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetAppendedItems(swigCPtr), false);
            return ret;
        }

        public StdUnregisteredValueVector GetDeletedItems()
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetDeletedItems(swigCPtr), false);
            return ret;
        }

        public StdUnregisteredValueVector GetOrderedItems()
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetOrderedItems(swigCPtr), false);
            return ret;
        }

        public StdUnregisteredValueVector GetItems(SdfListOpType type)
        {
            StdUnregisteredValueVector ret = new StdUnregisteredValueVector(UsdCsPINVOKE.SdfUnregisteredValueListOp_GetItems(swigCPtr, (int)type), false);
            return ret;
        }

        public void SetExplicitItems(StdUnregisteredValueVector items)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetExplicitItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAddedItems(StdUnregisteredValueVector items)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetAddedItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetPrependedItems(StdUnregisteredValueVector items)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetPrependedItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetAppendedItems(StdUnregisteredValueVector items)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetAppendedItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetDeletedItems(StdUnregisteredValueVector items)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetDeletedItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetOrderedItems(StdUnregisteredValueVector items)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetOrderedItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetItems(StdUnregisteredValueVector items, SdfListOpType type)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_SetItems(swigCPtr, StdUnregisteredValueVector.getCPtr(items), (int)type);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Clear()
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_Clear(swigCPtr);
        }

        public void ClearAndMakeExplicit()
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_ClearAndMakeExplicit(swigCPtr);
        }

        public bool ReplaceOperations(SdfListOpType op, uint index, uint n, StdUnregisteredValueVector newItems)
        {
            bool ret = UsdCsPINVOKE.SdfUnregisteredValueListOp_ReplaceOperations(swigCPtr, (int)op, index, n, StdUnregisteredValueVector.getCPtr(newItems));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void ComposeOperations(SdfUnregisteredValueListOp stronger, SdfListOpType op)
        {
            UsdCsPINVOKE.SdfUnregisteredValueListOp_ComposeOperations(swigCPtr, SdfUnregisteredValueListOp.getCPtr(stronger), (int)op);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }
    }
}
