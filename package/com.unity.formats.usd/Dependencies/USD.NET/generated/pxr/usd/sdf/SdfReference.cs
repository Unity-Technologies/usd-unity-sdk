//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfReference : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfReference(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfReference obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfReference()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfReference(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public SdfReference(string assetPath, SdfPath primPath, SdfLayerOffset layerOffset, VtDictionary customData) : this(UsdCsPINVOKE.new_SdfReference__SWIG_0(assetPath, SdfPath.getCPtr(primPath), SdfLayerOffset.getCPtr(layerOffset), VtDictionary.getCPtr(customData)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfReference(string assetPath, SdfPath primPath, SdfLayerOffset layerOffset) : this(UsdCsPINVOKE.new_SdfReference__SWIG_1(assetPath, SdfPath.getCPtr(primPath), SdfLayerOffset.getCPtr(layerOffset)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfReference(string assetPath, SdfPath primPath) : this(UsdCsPINVOKE.new_SdfReference__SWIG_2(assetPath, SdfPath.getCPtr(primPath)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfReference(string assetPath) : this(UsdCsPINVOKE.new_SdfReference__SWIG_3(assetPath), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfReference() : this(UsdCsPINVOKE.new_SdfReference__SWIG_4(), true)
        {
        }

        public string GetAssetPath()
        {
            string ret = UsdCsPINVOKE.SdfReference_GetAssetPath(swigCPtr);
            return ret;
        }

        public void SetAssetPath(string assetPath)
        {
            UsdCsPINVOKE.SdfReference_SetAssetPath(swigCPtr, assetPath);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfPath GetPrimPath()
        {
            SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfReference_GetPrimPath(swigCPtr), false);
            return ret;
        }

        public void SetPrimPath(SdfPath primPath)
        {
            UsdCsPINVOKE.SdfReference_SetPrimPath(swigCPtr, SdfPath.getCPtr(primPath));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfLayerOffset GetLayerOffset()
        {
            SdfLayerOffset ret = new SdfLayerOffset(UsdCsPINVOKE.SdfReference_GetLayerOffset(swigCPtr), false);
            return ret;
        }

        public void SetLayerOffset(SdfLayerOffset layerOffset)
        {
            UsdCsPINVOKE.SdfReference_SetLayerOffset(swigCPtr, SdfLayerOffset.getCPtr(layerOffset));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public VtDictionary GetCustomData()
        {
            VtDictionary ret = new VtDictionary(UsdCsPINVOKE.SdfReference_GetCustomData(swigCPtr), false);
            return ret;
        }

        public void SetCustomData(VtDictionary customData)
        {
            UsdCsPINVOKE.SdfReference_SetCustomData__SWIG_0(swigCPtr, VtDictionary.getCPtr(customData));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetCustomData(string name, VtValue value)
        {
            UsdCsPINVOKE.SdfReference_SetCustomData__SWIG_1(swigCPtr, name, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SwapCustomData(VtDictionary customData)
        {
            UsdCsPINVOKE.SdfReference_SwapCustomData(swigCPtr, VtDictionary.getCPtr(customData));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool IsInternal()
        {
            bool ret = UsdCsPINVOKE.SdfReference_IsInternal(swigCPtr);
            return ret;
        }

        public class IdentityEqual : global::System.IDisposable
        {
            private global::System.Runtime.InteropServices.HandleRef swigCPtr;
            protected bool swigCMemOwn;

            internal IdentityEqual(global::System.IntPtr cPtr, bool cMemoryOwn)
            {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
            }

            internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IdentityEqual obj)
            {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
            }

            ~IdentityEqual()
            {
                Dispose();
            }

            public virtual void Dispose()
            {
                lock (this) {
                    if (swigCPtr.Handle != global::System.IntPtr.Zero)
                    {
                        if (swigCMemOwn)
                        {
                            swigCMemOwn = false;
                            UsdCsPINVOKE.delete_SdfReference_IdentityEqual(swigCPtr);
                        }
                        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                    }
                    global::System.GC.SuppressFinalize(this);
                }
            }

            public IdentityEqual() : this(UsdCsPINVOKE.new_SdfReference_IdentityEqual(), true)
            {
            }
        }

        public class IdentityLessThan : global::System.IDisposable
        {
            private global::System.Runtime.InteropServices.HandleRef swigCPtr;
            protected bool swigCMemOwn;

            internal IdentityLessThan(global::System.IntPtr cPtr, bool cMemoryOwn)
            {
                swigCMemOwn = cMemoryOwn;
                swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
            }

            internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IdentityLessThan obj)
            {
                return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
            }

            ~IdentityLessThan()
            {
                Dispose();
            }

            public virtual void Dispose()
            {
                lock (this) {
                    if (swigCPtr.Handle != global::System.IntPtr.Zero)
                    {
                        if (swigCMemOwn)
                        {
                            swigCMemOwn = false;
                            UsdCsPINVOKE.delete_SdfReference_IdentityLessThan(swigCPtr);
                        }
                        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                    }
                    global::System.GC.SuppressFinalize(this);
                }
            }

            public IdentityLessThan() : this(UsdCsPINVOKE.new_SdfReference_IdentityLessThan(), true)
            {
            }
        }
    }
}
