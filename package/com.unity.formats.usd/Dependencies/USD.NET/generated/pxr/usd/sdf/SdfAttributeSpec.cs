//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfAttributeSpec : SdfPropertySpec
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal SdfAttributeSpec(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.SdfAttributeSpec_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfAttributeSpec obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfAttributeSpec()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfAttributeSpec(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public static SdfAttributeSpecHandle New(SdfPrimSpecHandle owner, string name, SdfValueTypeName typeName, SdfVariability variability, bool custom)
        {
            SdfAttributeSpecHandle ret = new SdfAttributeSpecHandle(UsdCsPINVOKE.SdfAttributeSpec_New__SWIG_0(SdfPrimSpecHandle.getCPtr(owner), name, SdfValueTypeName.getCPtr(typeName), (int)variability, custom), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfAttributeSpecHandle New(SdfPrimSpecHandle owner, string name, SdfValueTypeName typeName, SdfVariability variability)
        {
            SdfAttributeSpecHandle ret = new SdfAttributeSpecHandle(UsdCsPINVOKE.SdfAttributeSpec_New__SWIG_1(SdfPrimSpecHandle.getCPtr(owner), name, SdfValueTypeName.getCPtr(typeName), (int)variability), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static SdfAttributeSpecHandle New(SdfPrimSpecHandle owner, string name, SdfValueTypeName typeName)
        {
            SdfAttributeSpecHandle ret = new SdfAttributeSpecHandle(UsdCsPINVOKE.SdfAttributeSpec_New__SWIG_2(SdfPrimSpecHandle.getCPtr(owner), name, SdfValueTypeName.getCPtr(typeName)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_SdfConnectionsProxy GetConnectionPathList()
        {
            SWIGTYPE_p_SdfConnectionsProxy ret = new SWIGTYPE_p_SdfConnectionsProxy(UsdCsPINVOKE.SdfAttributeSpec_GetConnectionPathList(swigCPtr), true);
            return ret;
        }

        public bool HasConnectionPaths()
        {
            bool ret = UsdCsPINVOKE.SdfAttributeSpec_HasConnectionPaths(swigCPtr);
            return ret;
        }

        public void ClearConnectionPaths()
        {
            UsdCsPINVOKE.SdfAttributeSpec_ClearConnectionPaths(swigCPtr);
        }

        public VtTokenArray GetAllowedTokens()
        {
            VtTokenArray ret = new VtTokenArray(UsdCsPINVOKE.SdfAttributeSpec_GetAllowedTokens(swigCPtr), true);
            return ret;
        }

        public void SetAllowedTokens(VtTokenArray allowedTokens)
        {
            UsdCsPINVOKE.SdfAttributeSpec_SetAllowedTokens(swigCPtr, VtTokenArray.getCPtr(allowedTokens));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasAllowedTokens()
        {
            bool ret = UsdCsPINVOKE.SdfAttributeSpec_HasAllowedTokens(swigCPtr);
            return ret;
        }

        public void ClearAllowedTokens()
        {
            UsdCsPINVOKE.SdfAttributeSpec_ClearAllowedTokens(swigCPtr);
        }

        public SWIGTYPE_p_TfEnum GetDisplayUnit()
        {
            SWIGTYPE_p_TfEnum ret = new SWIGTYPE_p_TfEnum(UsdCsPINVOKE.SdfAttributeSpec_GetDisplayUnit(swigCPtr), true);
            return ret;
        }

        public void SetDisplayUnit(SWIGTYPE_p_TfEnum displayUnit)
        {
            UsdCsPINVOKE.SdfAttributeSpec_SetDisplayUnit(swigCPtr, SWIGTYPE_p_TfEnum.getCPtr(displayUnit));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasDisplayUnit()
        {
            bool ret = UsdCsPINVOKE.SdfAttributeSpec_HasDisplayUnit(swigCPtr);
            return ret;
        }

        public void ClearDisplayUnit()
        {
            UsdCsPINVOKE.SdfAttributeSpec_ClearDisplayUnit(swigCPtr);
        }

        public TfToken GetColorSpace()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfAttributeSpec_GetColorSpace(swigCPtr), true);
            return ret;
        }

        public void SetColorSpace(TfToken colorSpace)
        {
            UsdCsPINVOKE.SdfAttributeSpec_SetColorSpace(swigCPtr, TfToken.getCPtr(colorSpace));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasColorSpace()
        {
            bool ret = UsdCsPINVOKE.SdfAttributeSpec_HasColorSpace(swigCPtr);
            return ret;
        }

        public void ClearColorSpace()
        {
            UsdCsPINVOKE.SdfAttributeSpec_ClearColorSpace(swigCPtr);
        }

        public TfToken GetRoleName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdfAttributeSpec_GetRoleName(swigCPtr), true);
            return ret;
        }
    }
}
