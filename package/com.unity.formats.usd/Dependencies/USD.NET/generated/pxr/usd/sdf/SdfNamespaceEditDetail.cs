//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdfNamespaceEditDetail : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal SdfNamespaceEditDetail(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfNamespaceEditDetail obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdfNamespaceEditDetail()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdfNamespaceEditDetail(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public SdfNamespaceEditDetail() : this(UsdCsPINVOKE.new_SdfNamespaceEditDetail__SWIG_0(), true)
        {
        }

        public SdfNamespaceEditDetail(SdfNamespaceEditDetail.Result arg0, SdfNamespaceEdit edit, string reason) : this(UsdCsPINVOKE.new_SdfNamespaceEditDetail__SWIG_1((int)arg0, SdfNamespaceEdit.getCPtr(edit), reason), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdfNamespaceEditDetail.Result result
        {
            set
            {
                UsdCsPINVOKE.SdfNamespaceEditDetail_result_set(swigCPtr, (int)value);
            }
            get
            {
                SdfNamespaceEditDetail.Result ret = (SdfNamespaceEditDetail.Result)UsdCsPINVOKE.SdfNamespaceEditDetail_result_get(swigCPtr);
                return ret;
            }
        }

        public SdfNamespaceEdit edit
        {
            set
            {
                UsdCsPINVOKE.SdfNamespaceEditDetail_edit_set(swigCPtr, SdfNamespaceEdit.getCPtr(value));
            }
            get
            {
                global::System.IntPtr cPtr = UsdCsPINVOKE.SdfNamespaceEditDetail_edit_get(swigCPtr);
                SdfNamespaceEdit ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdfNamespaceEdit(cPtr, false);
                return ret;
            }
        }

        public string reason
        {
            set
            {
                UsdCsPINVOKE.SdfNamespaceEditDetail_reason_set(swigCPtr, value);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            }
            get
            {
                string ret = UsdCsPINVOKE.SdfNamespaceEditDetail_reason_get(swigCPtr);
                if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        public enum Result
        {
            Error,
            Unbatched,
            Okay
        }
    }
}
