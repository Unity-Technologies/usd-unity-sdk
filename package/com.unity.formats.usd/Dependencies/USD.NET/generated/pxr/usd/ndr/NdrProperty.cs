//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class NdrProperty : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal NdrProperty(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NdrProperty obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~NdrProperty()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_NdrProperty(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public NdrProperty(TfToken name, TfToken type, VtValue defaultValue, bool isOutput, uint arraySize, bool isDynamicArray, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata) : this(UsdCsPINVOKE.new_NdrProperty(TfToken.getCPtr(name), TfToken.getCPtr(type), VtValue.getCPtr(defaultValue), isOutput, arraySize, isDynamicArray, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public TfToken GetName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.NdrProperty_GetName(swigCPtr), false);
            return ret;
        }

        public TfToken GetTfType()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.NdrProperty_GetTfType(swigCPtr), false);
            return ret;
        }

        public VtValue GetDefaultValue()
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.NdrProperty_GetDefaultValue(swigCPtr), false);
            return ret;
        }

        public bool IsOutput()
        {
            bool ret = UsdCsPINVOKE.NdrProperty_IsOutput(swigCPtr);
            return ret;
        }

        public bool IsArray()
        {
            bool ret = UsdCsPINVOKE.NdrProperty_IsArray(swigCPtr);
            return ret;
        }

        public bool IsDynamicArray()
        {
            bool ret = UsdCsPINVOKE.NdrProperty_IsDynamicArray(swigCPtr);
            return ret;
        }

        public int GetArraySize()
        {
            int ret = UsdCsPINVOKE.NdrProperty_GetArraySize(swigCPtr);
            return ret;
        }

        public virtual string GetInfoString()
        {
            string ret = UsdCsPINVOKE.NdrProperty_GetInfoString(swigCPtr);
            return ret;
        }

        public virtual SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t GetMetadata()
        {
            SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t ret = new SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t(UsdCsPINVOKE.NdrProperty_GetMetadata(swigCPtr), false);
            return ret;
        }

        public virtual bool IsConnectable()
        {
            bool ret = UsdCsPINVOKE.NdrProperty_IsConnectable(swigCPtr);
            return ret;
        }

        public virtual bool CanConnectTo(NdrProperty other)
        {
            bool ret = UsdCsPINVOKE.NdrProperty_CanConnectTo(swigCPtr, NdrProperty.getCPtr(other));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public virtual SWIGTYPE_p_std__pairT_SdfValueTypeName_TfToken_t GetTypeAsSdfType()
        {
            SWIGTYPE_p_std__pairT_SdfValueTypeName_TfToken_t ret = new SWIGTYPE_p_std__pairT_SdfValueTypeName_TfToken_t(UsdCsPINVOKE.NdrProperty_GetTypeAsSdfType(swigCPtr), true);
            return ret;
        }
    }
}
