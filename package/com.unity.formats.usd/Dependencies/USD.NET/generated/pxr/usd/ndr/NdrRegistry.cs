//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class NdrRegistry : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal NdrRegistry(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NdrRegistry obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        throw new global::System.MethodAccessException("C++ destructor does not have public access");
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public static NdrRegistry GetInstance()
        {
            NdrRegistry ret = new NdrRegistry(UsdCsPINVOKE.NdrRegistry_GetInstance(), false);
            return ret;
        }

        public void SetExtraDiscoveryPlugins(SWIGTYPE_p_TfDeclarePtrsT_NdrDiscoveryPlugin_t__RefPtrVector plugins)
        {
            UsdCsPINVOKE.NdrRegistry_SetExtraDiscoveryPlugins__SWIG_0(swigCPtr, SWIGTYPE_p_TfDeclarePtrsT_NdrDiscoveryPlugin_t__RefPtrVector.getCPtr(plugins));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetExtraDiscoveryPlugins(TfTypeVector pluginTypes)
        {
            UsdCsPINVOKE.NdrRegistry_SetExtraDiscoveryPlugins__SWIG_1(swigCPtr, TfTypeVector.getCPtr(pluginTypes));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetExtraParserPlugins(TfTypeVector pluginTypes)
        {
            UsdCsPINVOKE.NdrRegistry_SetExtraParserPlugins(swigCPtr, TfTypeVector.getCPtr(pluginTypes));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public NdrNode GetNodeFromAsset(SdfAssetPath asset, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata, TfToken subIdentifier, TfToken sourceType)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeFromAsset__SWIG_0(swigCPtr, SdfAssetPath.getCPtr(asset), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata), TfToken.getCPtr(subIdentifier), TfToken.getCPtr(sourceType));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeFromAsset(SdfAssetPath asset, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata, TfToken subIdentifier)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeFromAsset__SWIG_1(swigCPtr, SdfAssetPath.getCPtr(asset), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata), TfToken.getCPtr(subIdentifier));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeFromAsset(SdfAssetPath asset, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeFromAsset__SWIG_2(swigCPtr, SdfAssetPath.getCPtr(asset), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeFromSourceCode(string sourceCode, TfToken sourceType, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeFromSourceCode(swigCPtr, sourceCode, TfToken.getCPtr(sourceType), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public StdStringVector GetSearchURIs()
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.NdrRegistry_GetSearchURIs(swigCPtr), true);
            return ret;
        }

        public TfTokenVector GetNodeIdentifiers(TfToken family, NdrVersionFilter filter)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.NdrRegistry_GetNodeIdentifiers__SWIG_0(swigCPtr, TfToken.getCPtr(family), (int)filter), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfTokenVector GetNodeIdentifiers(TfToken family)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.NdrRegistry_GetNodeIdentifiers__SWIG_1(swigCPtr, TfToken.getCPtr(family)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfTokenVector GetNodeIdentifiers()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.NdrRegistry_GetNodeIdentifiers__SWIG_2(swigCPtr), true);
            return ret;
        }

        public StdStringVector GetNodeNames(TfToken family)
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.NdrRegistry_GetNodeNames__SWIG_0(swigCPtr, TfToken.getCPtr(family)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public StdStringVector GetNodeNames()
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.NdrRegistry_GetNodeNames__SWIG_1(swigCPtr), true);
            return ret;
        }

        public NdrNode GetNodeByIdentifier(TfToken identifier, TfTokenVector typePriority)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByIdentifier__SWIG_0(swigCPtr, TfToken.getCPtr(identifier), TfTokenVector.getCPtr(typePriority));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByIdentifier(TfToken identifier)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByIdentifier__SWIG_1(swigCPtr, TfToken.getCPtr(identifier));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByIdentifierAndType(TfToken identifier, TfToken nodeType)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByIdentifierAndType(swigCPtr, TfToken.getCPtr(identifier), TfToken.getCPtr(nodeType));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByName(string name, TfTokenVector typePriority, NdrVersionFilter filter)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByName__SWIG_0(swigCPtr, name, TfTokenVector.getCPtr(typePriority), (int)filter);
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByName(string name, TfTokenVector typePriority)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByName__SWIG_1(swigCPtr, name, TfTokenVector.getCPtr(typePriority));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByName(string name)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByName__SWIG_2(swigCPtr, name);
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByNameAndType(string name, TfToken nodeType, NdrVersionFilter filter)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByNameAndType__SWIG_0(swigCPtr, name, TfToken.getCPtr(nodeType), (int)filter);
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public NdrNode GetNodeByNameAndType(string name, TfToken nodeType)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.NdrRegistry_GetNodeByNameAndType__SWIG_1(swigCPtr, name, TfToken.getCPtr(nodeType));
            NdrNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new NdrNode(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_NdrNode_const_p_t GetNodesByIdentifier(TfToken identifier)
        {
            SWIGTYPE_p_std__vectorT_NdrNode_const_p_t ret = new SWIGTYPE_p_std__vectorT_NdrNode_const_p_t(UsdCsPINVOKE.NdrRegistry_GetNodesByIdentifier(swigCPtr, TfToken.getCPtr(identifier)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_NdrNode_const_p_t GetNodesByName(string name, NdrVersionFilter filter)
        {
            SWIGTYPE_p_std__vectorT_NdrNode_const_p_t ret = new SWIGTYPE_p_std__vectorT_NdrNode_const_p_t(UsdCsPINVOKE.NdrRegistry_GetNodesByName__SWIG_0(swigCPtr, name, (int)filter), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_NdrNode_const_p_t GetNodesByName(string name)
        {
            SWIGTYPE_p_std__vectorT_NdrNode_const_p_t ret = new SWIGTYPE_p_std__vectorT_NdrNode_const_p_t(UsdCsPINVOKE.NdrRegistry_GetNodesByName__SWIG_1(swigCPtr, name), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_NdrNode_const_p_t GetNodesByFamily(TfToken family, NdrVersionFilter filter)
        {
            SWIGTYPE_p_std__vectorT_NdrNode_const_p_t ret = new SWIGTYPE_p_std__vectorT_NdrNode_const_p_t(UsdCsPINVOKE.NdrRegistry_GetNodesByFamily__SWIG_0(swigCPtr, TfToken.getCPtr(family), (int)filter), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_NdrNode_const_p_t GetNodesByFamily(TfToken family)
        {
            SWIGTYPE_p_std__vectorT_NdrNode_const_p_t ret = new SWIGTYPE_p_std__vectorT_NdrNode_const_p_t(UsdCsPINVOKE.NdrRegistry_GetNodesByFamily__SWIG_1(swigCPtr, TfToken.getCPtr(family)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_NdrNode_const_p_t GetNodesByFamily()
        {
            SWIGTYPE_p_std__vectorT_NdrNode_const_p_t ret = new SWIGTYPE_p_std__vectorT_NdrNode_const_p_t(UsdCsPINVOKE.NdrRegistry_GetNodesByFamily__SWIG_2(swigCPtr), true);
            return ret;
        }

        public TfTokenVector GetAllNodeSourceTypes()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.NdrRegistry_GetAllNodeSourceTypes(swigCPtr), true);
            return ret;
        }
    }
}
