//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdVariantSets : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdVariantSets(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdVariantSets obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdVariantSets()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdVariantSets(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdVariantSet AddVariantSet(string variantSetName, UsdListPosition position)
        {
            UsdVariantSet ret = new UsdVariantSet(UsdCsPINVOKE.UsdVariantSets_AddVariantSet__SWIG_0(swigCPtr, variantSetName, (int)position), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdVariantSet AddVariantSet(string variantSetName)
        {
            UsdVariantSet ret = new UsdVariantSet(UsdCsPINVOKE.UsdVariantSets_AddVariantSet__SWIG_1(swigCPtr, variantSetName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool GetNames(StdStringVector names)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSets_GetNames__SWIG_0(swigCPtr, StdStringVector.getCPtr(names));
            return ret;
        }

        public StdStringVector GetNames()
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.UsdVariantSets_GetNames__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdVariantSet GetVariantSet(string variantSetName)
        {
            UsdVariantSet ret = new UsdVariantSet(UsdCsPINVOKE.UsdVariantSets_GetVariantSet(swigCPtr, variantSetName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool HasVariantSet(string variantSetName)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSets_HasVariantSet(swigCPtr, variantSetName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string GetVariantSelection(string variantSetName)
        {
            string ret = UsdCsPINVOKE.UsdVariantSets_GetVariantSelection(swigCPtr, variantSetName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool SetSelection(string variantSetName, string variantName)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSets_SetSelection(swigCPtr, variantSetName, variantName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t GetAllVariantSelections()
        {
            SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t(UsdCsPINVOKE.UsdVariantSets_GetAllVariantSelections(swigCPtr), true);
            return ret;
        }
    }
}
