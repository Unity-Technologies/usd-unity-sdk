//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdAttribute : UsdProperty
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal UsdAttribute(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdAttribute_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdAttribute obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdAttribute()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdAttribute(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public UsdAttribute() : this(UsdCsPINVOKE.new_UsdAttribute(), true)
        {
        }

        public SdfVariability GetVariability()
        {
            SdfVariability ret = (SdfVariability)UsdCsPINVOKE.UsdAttribute_GetVariability(swigCPtr);
            return ret;
        }

        public bool SetVariability(SdfVariability variability)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_SetVariability(swigCPtr, (int)variability);
            return ret;
        }

        public SdfValueTypeName GetTypeName()
        {
            SdfValueTypeName ret = new SdfValueTypeName(UsdCsPINVOKE.UsdAttribute_GetTypeName(swigCPtr), true);
            return ret;
        }

        public bool SetTypeName(SdfValueTypeName typeName)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_SetTypeName(swigCPtr, SdfValueTypeName.getCPtr(typeName));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfToken GetRoleName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdAttribute_GetRoleName(swigCPtr), true);
            return ret;
        }

        public static bool GetUnionedTimeSamples(UsdAttributeVector attrs, StdDoubleVector times)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_GetUnionedTimeSamples(UsdAttributeVector.getCPtr(attrs), StdDoubleVector.getCPtr(times));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool GetUnionedTimeSamplesInInterval(UsdAttributeVector attrs, GfInterval interval, StdDoubleVector times)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_GetUnionedTimeSamplesInInterval(UsdAttributeVector.getCPtr(attrs), GfInterval.getCPtr(interval), StdDoubleVector.getCPtr(times));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint GetNumTimeSamples()
        {
            uint ret = UsdCsPINVOKE.UsdAttribute_GetNumTimeSamples(swigCPtr);
            return ret;
        }

        public bool GetBracketingTimeSamples(double desiredTime, out double lower, out double upper, out double hasTimeSamples)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_GetBracketingTimeSamples(swigCPtr, desiredTime, out lower, out upper, out hasTimeSamples);
            return ret;
        }

        public bool HasValue()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_HasValue(swigCPtr);
            return ret;
        }

        public bool HasAuthoredValueOpinion()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_HasAuthoredValueOpinion(swigCPtr);
            return ret;
        }

        public bool HasAuthoredValue()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_HasAuthoredValue(swigCPtr);
            return ret;
        }

        public bool HasFallbackValue()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_HasFallbackValue(swigCPtr);
            return ret;
        }

        public bool ValueMightBeTimeVarying()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_ValueMightBeTimeVarying(swigCPtr);
            return ret;
        }

        public bool Get(VtValue value, UsdTimeCode time)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_Get__SWIG_2(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdResolveInfo GetResolveInfo(UsdTimeCode time)
        {
            UsdResolveInfo ret = new UsdResolveInfo(UsdCsPINVOKE.UsdAttribute_GetResolveInfo__SWIG_0(swigCPtr, UsdTimeCode.getCPtr(time)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdResolveInfo GetResolveInfo()
        {
            UsdResolveInfo ret = new UsdResolveInfo(UsdCsPINVOKE.UsdAttribute_GetResolveInfo__SWIG_1(swigCPtr), true);
            return ret;
        }

        public bool Set(VtValue value, UsdTimeCode time)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_Set__SWIG_2(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Set(VtValue value)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_Set__SWIG_3(swigCPtr, VtValue.getCPtr(value));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Clear()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_Clear(swigCPtr);
            return ret;
        }

        public bool ClearAtTime(UsdTimeCode time)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_ClearAtTime(swigCPtr, UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ClearDefault()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_ClearDefault(swigCPtr);
            return ret;
        }

        public void Block()
        {
            UsdCsPINVOKE.UsdAttribute_Block(swigCPtr);
        }

        public bool AddConnection(SdfPath source, UsdListPosition position)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_AddConnection__SWIG_0(swigCPtr, SdfPath.getCPtr(source), (int)position);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool AddConnection(SdfPath source)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_AddConnection__SWIG_1(swigCPtr, SdfPath.getCPtr(source));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool RemoveConnection(SdfPath source)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_RemoveConnection(swigCPtr, SdfPath.getCPtr(source));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool BlockConnections()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_BlockConnections(swigCPtr);
            return ret;
        }

        public bool SetConnections(SdfPathVector sources)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_SetConnections(swigCPtr, SdfPathVector.getCPtr(sources));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ClearConnections()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_ClearConnections(swigCPtr);
            return ret;
        }

        public bool GetConnections(SdfPathVector sources)
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_GetConnections(swigCPtr, SdfPathVector.getCPtr(sources));
            return ret;
        }

        public bool HasAuthoredConnections()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_HasAuthoredConnections(swigCPtr);
            return ret;
        }

        public TfToken GetColorSpace()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.UsdAttribute_GetColorSpace(swigCPtr), true);
            return ret;
        }

        public void SetColorSpace(TfToken colorSpace)
        {
            UsdCsPINVOKE.UsdAttribute_SetColorSpace(swigCPtr, TfToken.getCPtr(colorSpace));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public bool HasColorSpace()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_HasColorSpace(swigCPtr);
            return ret;
        }

        public bool ClearColorSpace()
        {
            bool ret = UsdCsPINVOKE.UsdAttribute_ClearColorSpace(swigCPtr);
            return ret;
        }

        public StdDoubleVector GetTimeSamples()
        {
            StdDoubleVector ret = new StdDoubleVector(UsdCsPINVOKE.UsdAttribute_GetTimeSamples(swigCPtr), true);
            return ret;
        }

        public StdDoubleVector GetTimeSamplesInInterval(GfInterval interval)
        {
            StdDoubleVector ret = new StdDoubleVector(UsdCsPINVOKE.UsdAttribute_GetTimeSamplesInInterval(swigCPtr, GfInterval.getCPtr(interval)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public VtValue Get()
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.UsdAttribute_Get__SWIG_3(swigCPtr), true);
            return ret;
        }

        public VtValue Get(UsdTimeCode time)
        {
            VtValue ret = new VtValue(UsdCsPINVOKE.UsdAttribute_Get__SWIG_4(swigCPtr, UsdTimeCode.getCPtr(time)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }
    }
}
