//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdStageLoadRules : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdStageLoadRules(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdStageLoadRules obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdStageLoadRules()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdStageLoadRules(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdStageLoadRules() : this(UsdCsPINVOKE.new_UsdStageLoadRules__SWIG_0(), true)
        {
        }

        public static UsdStageLoadRules LoadAll()
        {
            UsdStageLoadRules ret = new UsdStageLoadRules(UsdCsPINVOKE.UsdStageLoadRules_LoadAll(), true);
            return ret;
        }

        public static UsdStageLoadRules LoadNone()
        {
            UsdStageLoadRules ret = new UsdStageLoadRules(UsdCsPINVOKE.UsdStageLoadRules_LoadNone(), true);
            return ret;
        }

        public UsdStageLoadRules(UsdStageLoadRules arg0) : this(UsdCsPINVOKE.new_UsdStageLoadRules__SWIG_1(UsdStageLoadRules.getCPtr(arg0)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void LoadWithDescendants(SdfPath path)
        {
            UsdCsPINVOKE.UsdStageLoadRules_LoadWithDescendants(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void LoadWithoutDescendants(SdfPath path)
        {
            UsdCsPINVOKE.UsdStageLoadRules_LoadWithoutDescendants(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Unload(SdfPath path)
        {
            UsdCsPINVOKE.UsdStageLoadRules_Unload(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void LoadAndUnload(SWIGTYPE_p_std__setT_SdfPath_t loadSet, SWIGTYPE_p_std__setT_SdfPath_t unloadSet, UsdLoadPolicy policy)
        {
            UsdCsPINVOKE.UsdStageLoadRules_LoadAndUnload(swigCPtr, SWIGTYPE_p_std__setT_SdfPath_t.getCPtr(loadSet), SWIGTYPE_p_std__setT_SdfPath_t.getCPtr(unloadSet), (int)policy);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void AddRule(SdfPath path, UsdStageLoadRules.Rule rule)
        {
            UsdCsPINVOKE.UsdStageLoadRules_AddRule(swigCPtr, SdfPath.getCPtr(path), (int)rule);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void SetRules(UsdStageLoadRulesVectorPair rules)
        {
            UsdCsPINVOKE.UsdStageLoadRules_SetRules__SWIG_0(swigCPtr, UsdStageLoadRulesVectorPair.getCPtr(rules));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void Minimize()
        {
            UsdCsPINVOKE.UsdStageLoadRules_Minimize(swigCPtr);
        }

        public bool IsLoaded(SdfPath path)
        {
            bool ret = UsdCsPINVOKE.UsdStageLoadRules_IsLoaded(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsLoadedWithAllDescendants(SdfPath path)
        {
            bool ret = UsdCsPINVOKE.UsdStageLoadRules_IsLoadedWithAllDescendants(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool IsLoadedWithNoDescendants(SdfPath path)
        {
            bool ret = UsdCsPINVOKE.UsdStageLoadRules_IsLoadedWithNoDescendants(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStageLoadRules.Rule GetEffectiveRuleForPath(SdfPath path)
        {
            UsdStageLoadRules.Rule ret = (UsdStageLoadRules.Rule)UsdCsPINVOKE.UsdStageLoadRules_GetEffectiveRuleForPath(swigCPtr, SdfPath.getCPtr(path));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStageLoadRulesVectorPair GetRules()
        {
            UsdStageLoadRulesVectorPair ret = new UsdStageLoadRulesVectorPair(UsdCsPINVOKE.UsdStageLoadRules_GetRules(swigCPtr), false);
            return ret;
        }

        public void swap(UsdStageLoadRules other)
        {
            UsdCsPINVOKE.UsdStageLoadRules_swap(swigCPtr, UsdStageLoadRules.getCPtr(other));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public enum Rule
        {
            AllRule,
            OnlyRule,
            NoneRule
        }
    }
}
