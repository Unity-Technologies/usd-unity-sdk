//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdVariantSet : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdVariantSet(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdVariantSet obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdVariantSet()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdVariantSet(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public bool AddVariant(string variantName, UsdListPosition position)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_AddVariant__SWIG_0(swigCPtr, variantName, (int)position);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool AddVariant(string variantName)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_AddVariant__SWIG_1(swigCPtr, variantName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public StdStringVector GetVariantNames()
        {
            StdStringVector ret = new StdStringVector(UsdCsPINVOKE.UsdVariantSet_GetVariantNames(swigCPtr), true);
            return ret;
        }

        public bool HasAuthoredVariant(string variantName)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_HasAuthoredVariant(swigCPtr, variantName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public string GetVariantSelection()
        {
            string ret = UsdCsPINVOKE.UsdVariantSet_GetVariantSelection(swigCPtr);
            return ret;
        }

        public bool HasAuthoredVariantSelection(/*cstype*/ out string value)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_HasAuthoredVariantSelection__SWIG_0(swigCPtr, out value);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool HasAuthoredVariantSelection()
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_HasAuthoredVariantSelection__SWIG_1(swigCPtr);
            return ret;
        }

        public bool SetVariantSelection(string variantName)
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_SetVariantSelection(swigCPtr, variantName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool ClearVariantSelection()
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_ClearVariantSelection(swigCPtr);
            return ret;
        }

        public UsdEditTarget GetVariantEditTarget(SdfLayerHandle layer)
        {
            UsdEditTarget ret = new UsdEditTarget(UsdCsPINVOKE.UsdVariantSet_GetVariantEditTarget__SWIG_0(swigCPtr, SdfLayerHandle.getCPtr(layer)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdEditTarget GetVariantEditTarget()
        {
            UsdEditTarget ret = new UsdEditTarget(UsdCsPINVOKE.UsdVariantSet_GetVariantEditTarget__SWIG_1(swigCPtr), true);
            return ret;
        }

        public SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetVariantEditContext(SdfLayerHandle layer)
        {
            SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdVariantSet_GetVariantEditContext__SWIG_0(swigCPtr, SdfLayerHandle.getCPtr(layer)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t GetVariantEditContext()
        {
            SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t ret = new SWIGTYPE_p_std__pairT_UsdStageWeakPtr_UsdEditTarget_t(UsdCsPINVOKE.UsdVariantSet_GetVariantEditContext__SWIG_1(swigCPtr), true);
            return ret;
        }

        public UsdPrim GetPrim()
        {
            UsdPrim ret = new UsdPrim(UsdCsPINVOKE.UsdVariantSet_GetPrim(swigCPtr), false);
            return ret;
        }

        public string GetName()
        {
            string ret = UsdCsPINVOKE.UsdVariantSet_GetName(swigCPtr);
            return ret;
        }

        public bool IsValid()
        {
            bool ret = UsdCsPINVOKE.UsdVariantSet_IsValid(swigCPtr);
            return ret;
        }
    }
}
