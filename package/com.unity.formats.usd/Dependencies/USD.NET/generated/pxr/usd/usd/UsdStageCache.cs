//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdStageCache : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdStageCache(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdStageCache obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdStageCache()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdStageCache(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdStageCache() : this(UsdCsPINVOKE.new_UsdStageCache__SWIG_0(), true)
        {
        }

        public UsdStageCache(UsdStageCache other) : this(UsdCsPINVOKE.new_UsdStageCache__SWIG_1(UsdStageCache.getCPtr(other)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public void swap(UsdStageCache other)
        {
            UsdCsPINVOKE.UsdStageCache_swap(swigCPtr, UsdStageCache.getCPtr(other));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdStageRefPtrVector GetAllStages()
        {
            UsdStageRefPtrVector ret = new UsdStageRefPtrVector(UsdCsPINVOKE.UsdStageCache_GetAllStages(swigCPtr), true);
            return ret;
        }

        public uint Size()
        {
            uint ret = UsdCsPINVOKE.UsdStageCache_Size(swigCPtr);
            return ret;
        }

        public bool IsEmpty()
        {
            bool ret = UsdCsPINVOKE.UsdStageCache_IsEmpty(swigCPtr);
            return ret;
        }

        public UsdStageCacheResultPair RequestStage(UsdStageCacheRequest request)
        {
            UsdStageCacheResultPair ret = new UsdStageCacheResultPair(UsdCsPINVOKE.UsdStageCache_RequestStage(swigCPtr, UsdStageCacheRequest.getCPtr(request)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStage Find(SWIGTYPE_p_UsdStageCache__Id id)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.UsdStageCache_Find(swigCPtr, SWIGTYPE_p_UsdStageCache__Id.getCPtr(id));
            UsdStage ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdStage(cPtr, true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStage FindOneMatching(SdfLayerHandle rootLayer)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.UsdStageCache_FindOneMatching__SWIG_0(swigCPtr, SdfLayerHandle.getCPtr(rootLayer));
            UsdStage ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdStage(cPtr, true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStage FindOneMatching(SdfLayerHandle rootLayer, SdfLayerHandle sessionLayer)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.UsdStageCache_FindOneMatching__SWIG_1(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), SdfLayerHandle.getCPtr(sessionLayer));
            UsdStage ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdStage(cPtr, true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStage FindOneMatching(SdfLayerHandle rootLayer, ArResolverContext pathResolverContext)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.UsdStageCache_FindOneMatching__SWIG_2(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), ArResolverContext.getCPtr(pathResolverContext));
            UsdStage ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdStage(cPtr, true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStage FindOneMatching(SdfLayerHandle rootLayer, SdfLayerHandle sessionLayer, ArResolverContext pathResolverContext)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.UsdStageCache_FindOneMatching__SWIG_3(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), SdfLayerHandle.getCPtr(sessionLayer), ArResolverContext.getCPtr(pathResolverContext));
            UsdStage ret = (cPtr == global::System.IntPtr.Zero) ? null : new UsdStage(cPtr, true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStageRefPtrVector FindAllMatching(SdfLayerHandle rootLayer)
        {
            UsdStageRefPtrVector ret = new UsdStageRefPtrVector(UsdCsPINVOKE.UsdStageCache_FindAllMatching__SWIG_0(swigCPtr, SdfLayerHandle.getCPtr(rootLayer)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStageRefPtrVector FindAllMatching(SdfLayerHandle rootLayer, SdfLayerHandle sessionLayer)
        {
            UsdStageRefPtrVector ret = new UsdStageRefPtrVector(UsdCsPINVOKE.UsdStageCache_FindAllMatching__SWIG_1(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), SdfLayerHandle.getCPtr(sessionLayer)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStageRefPtrVector FindAllMatching(SdfLayerHandle rootLayer, ArResolverContext pathResolverContext)
        {
            UsdStageRefPtrVector ret = new UsdStageRefPtrVector(UsdCsPINVOKE.UsdStageCache_FindAllMatching__SWIG_2(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), ArResolverContext.getCPtr(pathResolverContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdStageRefPtrVector FindAllMatching(SdfLayerHandle rootLayer, SdfLayerHandle sessionLayer, ArResolverContext pathResolverContext)
        {
            UsdStageRefPtrVector ret = new UsdStageRefPtrVector(UsdCsPINVOKE.UsdStageCache_FindAllMatching__SWIG_3(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), SdfLayerHandle.getCPtr(sessionLayer), ArResolverContext.getCPtr(pathResolverContext)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_UsdStageCache__Id GetId(UsdStage stage)
        {
            SWIGTYPE_p_UsdStageCache__Id ret = new SWIGTYPE_p_UsdStageCache__Id(UsdCsPINVOKE.UsdStageCache_GetId(swigCPtr, UsdStage.getCPtr(stage)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Contains(UsdStage stage)
        {
            bool ret = UsdCsPINVOKE.UsdStageCache_Contains__SWIG_0(swigCPtr, UsdStage.getCPtr(stage));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Contains(SWIGTYPE_p_UsdStageCache__Id id)
        {
            bool ret = UsdCsPINVOKE.UsdStageCache_Contains__SWIG_1(swigCPtr, SWIGTYPE_p_UsdStageCache__Id.getCPtr(id));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SWIGTYPE_p_UsdStageCache__Id Insert(UsdStage stage)
        {
            SWIGTYPE_p_UsdStageCache__Id ret = new SWIGTYPE_p_UsdStageCache__Id(UsdCsPINVOKE.UsdStageCache_Insert(swigCPtr, UsdStage.getCPtr(stage)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Erase(SWIGTYPE_p_UsdStageCache__Id id)
        {
            bool ret = UsdCsPINVOKE.UsdStageCache_Erase__SWIG_0(swigCPtr, SWIGTYPE_p_UsdStageCache__Id.getCPtr(id));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Erase(UsdStage stage)
        {
            bool ret = UsdCsPINVOKE.UsdStageCache_Erase__SWIG_1(swigCPtr, UsdStage.getCPtr(stage));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint EraseAll(SdfLayerHandle rootLayer)
        {
            uint ret = UsdCsPINVOKE.UsdStageCache_EraseAll__SWIG_0(swigCPtr, SdfLayerHandle.getCPtr(rootLayer));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint EraseAll(SdfLayerHandle rootLayer, SdfLayerHandle sessionLayer)
        {
            uint ret = UsdCsPINVOKE.UsdStageCache_EraseAll__SWIG_1(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), SdfLayerHandle.getCPtr(sessionLayer));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint EraseAll(SdfLayerHandle rootLayer, SdfLayerHandle sessionLayer, ArResolverContext pathResolverContext)
        {
            uint ret = UsdCsPINVOKE.UsdStageCache_EraseAll__SWIG_2(swigCPtr, SdfLayerHandle.getCPtr(rootLayer), SdfLayerHandle.getCPtr(sessionLayer), ArResolverContext.getCPtr(pathResolverContext));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public void Clear()
        {
            UsdCsPINVOKE.UsdStageCache_Clear(swigCPtr);
        }

        public void SetDebugName(string debugName)
        {
            UsdCsPINVOKE.UsdStageCache_SetDebugName(swigCPtr, debugName);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public string GetDebugName()
        {
            string ret = UsdCsPINVOKE.UsdStageCache_GetDebugName(swigCPtr);
            return ret;
        }
    }
}
