//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdAttributeQuery : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdAttributeQuery(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdAttributeQuery obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdAttributeQuery()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdAttributeQuery(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public UsdAttributeQuery() : this(UsdCsPINVOKE.new_UsdAttributeQuery__SWIG_0(), true)
        {
        }

        public UsdAttributeQuery(UsdAttribute attr) : this(UsdCsPINVOKE.new_UsdAttributeQuery__SWIG_1(UsdAttribute.getCPtr(attr)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdAttributeQuery(UsdPrim prim, TfToken attrName) : this(UsdCsPINVOKE.new_UsdAttributeQuery__SWIG_2(UsdPrim.getCPtr(prim), TfToken.getCPtr(attrName)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public static UsdAttributeQueryVector CreateQueries(UsdPrim prim, TfTokenVector attrNames)
        {
            UsdAttributeQueryVector ret = new UsdAttributeQueryVector(UsdCsPINVOKE.UsdAttributeQuery_CreateQueries(UsdPrim.getCPtr(prim), TfTokenVector.getCPtr(attrNames)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute GetAttribute()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdAttributeQuery_GetAttribute(swigCPtr), false);
            return ret;
        }

        public bool IsValid()
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_IsValid(swigCPtr);
            return ret;
        }

        public bool Get(VtValue value, UsdTimeCode time)
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_Get__SWIG_2(swigCPtr, VtValue.getCPtr(value), UsdTimeCode.getCPtr(time));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public bool Get(VtValue value)
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_Get__SWIG_3(swigCPtr, VtValue.getCPtr(value));
            return ret;
        }

        public bool GetTimeSamples(StdDoubleVector times)
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_GetTimeSamples(swigCPtr, StdDoubleVector.getCPtr(times));
            return ret;
        }

        public static bool GetUnionedTimeSamples(UsdAttributeQueryVector attrQueries, StdDoubleVector times)
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_GetUnionedTimeSamples(UsdAttributeQueryVector.getCPtr(attrQueries), StdDoubleVector.getCPtr(times));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static bool GetUnionedTimeSamplesInInterval(UsdAttributeQueryVector attrQueries, GfInterval interval, StdDoubleVector times)
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_GetUnionedTimeSamplesInInterval(UsdAttributeQueryVector.getCPtr(attrQueries), GfInterval.getCPtr(interval), StdDoubleVector.getCPtr(times));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public uint GetNumTimeSamples()
        {
            uint ret = UsdCsPINVOKE.UsdAttributeQuery_GetNumTimeSamples(swigCPtr);
            return ret;
        }

        public bool GetBracketingTimeSamples(double desiredTime, out double lower, out double upper, out double hasTimeSamples)
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_GetBracketingTimeSamples(swigCPtr, desiredTime, out lower, out upper, out hasTimeSamples);
            return ret;
        }

        public bool HasValue()
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_HasValue(swigCPtr);
            return ret;
        }

        public bool HasAuthoredValueOpinion()
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_HasAuthoredValueOpinion(swigCPtr);
            return ret;
        }

        public bool HasAuthoredValue()
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_HasAuthoredValue(swigCPtr);
            return ret;
        }

        public bool HasFallbackValue()
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_HasFallbackValue(swigCPtr);
            return ret;
        }

        public bool ValueMightBeTimeVarying()
        {
            bool ret = UsdCsPINVOKE.UsdAttributeQuery_ValueMightBeTimeVarying(swigCPtr);
            return ret;
        }
    }
}
