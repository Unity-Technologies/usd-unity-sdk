//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdPrimSubtreeIterator : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdPrimSubtreeIterator(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdPrimSubtreeIterator obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdPrimSubtreeIterator()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdPrimSubtreeIterator(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public void MoveNext()
        {
            UsdCsPINVOKE.UsdPrimSubtreeIterator_MoveNext(swigCPtr);
        }

        public UsdPrim GetCurrent()
        {
            UsdPrim ret = new UsdPrim(UsdCsPINVOKE.UsdPrimSubtreeIterator_GetCurrent(swigCPtr), true);
            return ret;
        }

        public static bool Equals(UsdPrimSubtreeIterator lhs, UsdPrimSubtreeIterator rhs)
        {
            bool ret = UsdCsPINVOKE.UsdPrimSubtreeIterator_Equals(UsdPrimSubtreeIterator.getCPtr(lhs), UsdPrimSubtreeIterator.getCPtr(rhs));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        override public int GetHashCode()
        {
            int ret = UsdCsPINVOKE.UsdPrimSubtreeIterator_GetHashCode(swigCPtr);
            return ret;
        }

        public static bool operator==(UsdPrimSubtreeIterator lhs, UsdPrimSubtreeIterator rhs)
        {
            // The Swig binding glue will re-enter this operator comparing to null, so
            // that case must be handled explicitly to avoid an infinite loop. This is still
            // not great, since it crosses the C#/C++ barrier twice. A better approache might
            // be to return a simple value from C++ that can be compared in C#.
            bool lnull = lhs as object == null;
            bool rnull = rhs as object == null;
            return (lnull == rnull) && ((lnull && rnull) || UsdPrimSubtreeIterator.Equals(lhs, rhs));
        }

        public static bool operator!=(UsdPrimSubtreeIterator lhs, UsdPrimSubtreeIterator rhs)
        {
            return !(lhs == rhs);
        }

        override public bool Equals(object rhs)
        {
            return UsdPrimSubtreeIterator.Equals(this, rhs as UsdPrimSubtreeIterator);
        }

        public UsdPrimSubtreeIterator() : this(UsdCsPINVOKE.new_UsdPrimSubtreeIterator(), true)
        {
        }
    }
}
