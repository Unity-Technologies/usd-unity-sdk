//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdRiRisIntegrator : UsdTyped
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal UsdRiRisIntegrator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.UsdRiRisIntegrator_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdRiRisIntegrator obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~UsdRiRisIntegrator()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_UsdRiRisIntegrator(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public UsdRiRisIntegrator(UsdPrim prim) : this(UsdCsPINVOKE.new_UsdRiRisIntegrator__SWIG_0(UsdPrim.getCPtr(prim)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public UsdRiRisIntegrator() : this(UsdCsPINVOKE.new_UsdRiRisIntegrator__SWIG_1(), true)
        {
        }

        public UsdRiRisIntegrator(UsdSchemaBase schemaObj) : this(UsdCsPINVOKE.new_UsdRiRisIntegrator__SWIG_2(UsdSchemaBase.getCPtr(schemaObj)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public new static TfTokenVector GetSchemaAttributeNames(bool includeInherited)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdRiRisIntegrator_GetSchemaAttributeNames__SWIG_0(includeInherited), false);
            return ret;
        }

        public new static TfTokenVector GetSchemaAttributeNames()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.UsdRiRisIntegrator_GetSchemaAttributeNames__SWIG_1(), false);
            return ret;
        }

        public new static UsdRiRisIntegrator Get(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdRiRisIntegrator ret = new UsdRiRisIntegrator(UsdCsPINVOKE.UsdRiRisIntegrator_Get(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public static UsdRiRisIntegrator Define(UsdStageWeakPtr stage, SdfPath path)
        {
            UsdRiRisIntegrator ret = new UsdRiRisIntegrator(UsdCsPINVOKE.UsdRiRisIntegrator_Define(UsdStageWeakPtr.getCPtr(stage), SdfPath.getCPtr(path)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute GetFilePathAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_GetFilePathAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateFilePathAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_CreateFilePathAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateFilePathAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_CreateFilePathAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateFilePathAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_CreateFilePathAttr__SWIG_2(swigCPtr), true);
            return ret;
        }

        public UsdAttribute GetArgsPathAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_GetArgsPathAttr(swigCPtr), true);
            return ret;
        }

        public UsdAttribute CreateArgsPathAttr(VtValue defaultValue, bool writeSparsely)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_CreateArgsPathAttr__SWIG_0(swigCPtr, VtValue.getCPtr(defaultValue), writeSparsely), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateArgsPathAttr(VtValue defaultValue)
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_CreateArgsPathAttr__SWIG_1(swigCPtr, VtValue.getCPtr(defaultValue)), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public UsdAttribute CreateArgsPathAttr()
        {
            UsdAttribute ret = new UsdAttribute(UsdCsPINVOKE.UsdRiRisIntegrator_CreateArgsPathAttr__SWIG_2(swigCPtr), true);
            return ret;
        }
    }
}
