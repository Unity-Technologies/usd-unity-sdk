//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdrShaderProperty : NdrProperty
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal SdrShaderProperty(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.SdrShaderProperty_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdrShaderProperty obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdrShaderProperty()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdrShaderProperty(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public SdrShaderProperty(TfToken name, TfToken type, VtValue defaultValue, bool isOutput, uint arraySize, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t hints, SWIGTYPE_p_std__vectorT_std__pairT_TfToken_TfToken_t_t options) : this(UsdCsPINVOKE.new_SdrShaderProperty(TfToken.getCPtr(name), TfToken.getCPtr(type), VtValue.getCPtr(defaultValue), isOutput, arraySize, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(hints), SWIGTYPE_p_std__vectorT_std__pairT_TfToken_TfToken_t_t.getCPtr(options)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public TfToken GetLabel()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderProperty_GetLabel(swigCPtr), false);
            return ret;
        }

        public string GetHelp()
        {
            string ret = UsdCsPINVOKE.SdrShaderProperty_GetHelp(swigCPtr);
            return ret;
        }

        public TfToken GetPage()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderProperty_GetPage(swigCPtr), false);
            return ret;
        }

        public TfToken GetWidget()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderProperty_GetWidget(swigCPtr), false);
            return ret;
        }

        public SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t GetHints()
        {
            SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t ret = new SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t(UsdCsPINVOKE.SdrShaderProperty_GetHints(swigCPtr), false);
            return ret;
        }

        public SWIGTYPE_p_std__vectorT_std__pairT_TfToken_TfToken_t_t GetOptions()
        {
            SWIGTYPE_p_std__vectorT_std__pairT_TfToken_TfToken_t_t ret = new SWIGTYPE_p_std__vectorT_std__pairT_TfToken_TfToken_t_t(UsdCsPINVOKE.SdrShaderProperty_GetOptions(swigCPtr), false);
            return ret;
        }

        public string GetImplementationName()
        {
            string ret = UsdCsPINVOKE.SdrShaderProperty_GetImplementationName(swigCPtr);
            return ret;
        }

        public TfToken GetVStructMemberOf()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderProperty_GetVStructMemberOf(swigCPtr), false);
            return ret;
        }

        public TfToken GetVStructMemberName()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderProperty_GetVStructMemberName(swigCPtr), false);
            return ret;
        }

        public bool IsVStructMember()
        {
            bool ret = UsdCsPINVOKE.SdrShaderProperty_IsVStructMember(swigCPtr);
            return ret;
        }

        public bool IsVStruct()
        {
            bool ret = UsdCsPINVOKE.SdrShaderProperty_IsVStruct(swigCPtr);
            return ret;
        }

        public TfToken GetVStructConditionalExpr()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderProperty_GetVStructConditionalExpr(swigCPtr), false);
            return ret;
        }

        public override bool IsConnectable()
        {
            bool ret = UsdCsPINVOKE.SdrShaderProperty_IsConnectable(swigCPtr);
            return ret;
        }

        public TfTokenVector GetValidConnectionTypes()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderProperty_GetValidConnectionTypes(swigCPtr), false);
            return ret;
        }

        public override bool CanConnectTo(NdrProperty other)
        {
            bool ret = UsdCsPINVOKE.SdrShaderProperty_CanConnectTo(swigCPtr, NdrProperty.getCPtr(other));
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public override SWIGTYPE_p_std__pairT_SdfValueTypeName_TfToken_t GetTypeAsSdfType()
        {
            SWIGTYPE_p_std__pairT_SdfValueTypeName_TfToken_t ret = new SWIGTYPE_p_std__pairT_SdfValueTypeName_TfToken_t(UsdCsPINVOKE.SdrShaderProperty_GetTypeAsSdfType(swigCPtr), true);
            return ret;
        }

        public bool IsAssetIdentifier()
        {
            bool ret = UsdCsPINVOKE.SdrShaderProperty_IsAssetIdentifier(swigCPtr);
            return ret;
        }

        public bool IsDefaultInput()
        {
            bool ret = UsdCsPINVOKE.SdrShaderProperty_IsDefaultInput(swigCPtr);
            return ret;
        }
    }
}
