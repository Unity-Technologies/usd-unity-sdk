//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class SdrShaderNode : NdrNode
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;

        internal SdrShaderNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.SdrShaderNode_SWIGUpcast(cPtr), cMemoryOwn)
        {
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdrShaderNode obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        ~SdrShaderNode()
        {
            Dispose();
        }

        public override void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        UsdCsPINVOKE.delete_SdrShaderNode(swigCPtr);
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
                base.Dispose();
            }
        }

        public SdrShaderNode(TfToken identifier, NdrVersion version, string name, TfToken family, TfToken context, TfToken sourceType, string definitionURI, string implementationURI, SWIGTYPE_p_std__vectorT_std__unique_ptrT_NdrProperty_t_t properties, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata, string sourceCode) : this(UsdCsPINVOKE.new_SdrShaderNode__SWIG_0(TfToken.getCPtr(identifier), NdrVersion.getCPtr(version), name, TfToken.getCPtr(family), TfToken.getCPtr(context), TfToken.getCPtr(sourceType), definitionURI, implementationURI, SWIGTYPE_p_std__vectorT_std__unique_ptrT_NdrProperty_t_t.getCPtr(properties), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata), sourceCode), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdrShaderNode(TfToken identifier, NdrVersion version, string name, TfToken family, TfToken context, TfToken sourceType, string definitionURI, string implementationURI, SWIGTYPE_p_std__vectorT_std__unique_ptrT_NdrProperty_t_t properties, SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t metadata) : this(UsdCsPINVOKE.new_SdrShaderNode__SWIG_1(TfToken.getCPtr(identifier), NdrVersion.getCPtr(version), name, TfToken.getCPtr(family), TfToken.getCPtr(context), TfToken.getCPtr(sourceType), definitionURI, implementationURI, SWIGTYPE_p_std__vectorT_std__unique_ptrT_NdrProperty_t_t.getCPtr(properties), SWIGTYPE_p_std__unordered_mapT_TfToken_std__string_TfToken__HashFunctor_t.getCPtr(metadata)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdrShaderNode(TfToken identifier, NdrVersion version, string name, TfToken family, TfToken context, TfToken sourceType, string definitionURI, string implementationURI, SWIGTYPE_p_std__vectorT_std__unique_ptrT_NdrProperty_t_t properties) : this(UsdCsPINVOKE.new_SdrShaderNode__SWIG_2(TfToken.getCPtr(identifier), NdrVersion.getCPtr(version), name, TfToken.getCPtr(family), TfToken.getCPtr(context), TfToken.getCPtr(sourceType), definitionURI, implementationURI, SWIGTYPE_p_std__vectorT_std__unique_ptrT_NdrProperty_t_t.getCPtr(properties)), true)
        {
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
        }

        public SdrShaderProperty GetShaderInput(TfToken inputName)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.SdrShaderNode_GetShaderInput(swigCPtr, TfToken.getCPtr(inputName));
            SdrShaderProperty ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdrShaderProperty(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public SdrShaderProperty GetShaderOutput(TfToken outputName)
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.SdrShaderNode_GetShaderOutput(swigCPtr, TfToken.getCPtr(outputName));
            SdrShaderProperty ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdrShaderProperty(cPtr, false);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfTokenVector GetAssetIdentifierInputNames()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetAssetIdentifierInputNames(swigCPtr), true);
            return ret;
        }

        public SdrShaderProperty GetDefaultInput()
        {
            global::System.IntPtr cPtr = UsdCsPINVOKE.SdrShaderNode_GetDefaultInput(swigCPtr);
            SdrShaderProperty ret = (cPtr == global::System.IntPtr.Zero) ? null : new SdrShaderProperty(cPtr, false);
            return ret;
        }

        public TfToken GetLabel()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderNode_GetLabel(swigCPtr), false);
            return ret;
        }

        public TfToken GetCategory()
        {
            TfToken ret = new TfToken(UsdCsPINVOKE.SdrShaderNode_GetCategory(swigCPtr), false);
            return ret;
        }

        public string GetRole()
        {
            string ret = UsdCsPINVOKE.SdrShaderNode_GetRole(swigCPtr);
            return ret;
        }

        public string GetHelp()
        {
            string ret = UsdCsPINVOKE.SdrShaderNode_GetHelp(swigCPtr);
            return ret;
        }

        public TfTokenVector GetDepartments()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetDepartments(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetPages()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetPages(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetPrimvars()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetPrimvars(swigCPtr), false);
            return ret;
        }

        public TfTokenVector GetAdditionalPrimvarProperties()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetAdditionalPrimvarProperties(swigCPtr), false);
            return ret;
        }

        public string GetImplementationName()
        {
            string ret = UsdCsPINVOKE.SdrShaderNode_GetImplementationName(swigCPtr);
            return ret;
        }

        public TfTokenVector GetPropertyNamesForPage(string pageName)
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetPropertyNamesForPage(swigCPtr, pageName), true);
            if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
            return ret;
        }

        public TfTokenVector GetAllVstructNames()
        {
            TfTokenVector ret = new TfTokenVector(UsdCsPINVOKE.SdrShaderNode_GetAllVstructNames(swigCPtr), true);
            return ret;
        }
    }
}
