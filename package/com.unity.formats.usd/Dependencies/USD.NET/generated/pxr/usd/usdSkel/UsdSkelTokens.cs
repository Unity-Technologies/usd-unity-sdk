//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr
{
    public class UsdSkelTokens : global::System.IDisposable
    {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;

        internal UsdSkelTokens(global::System.IntPtr cPtr, bool cMemoryOwn)
        {
            swigCMemOwn = cMemoryOwn;
            swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }

        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSkelTokens obj)
        {
            return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }

        public virtual void Dispose()
        {
            lock (this) {
                if (swigCPtr.Handle != global::System.IntPtr.Zero)
                {
                    if (swigCMemOwn)
                    {
                        swigCMemOwn = false;
                        throw new global::System.MethodAccessException("C++ destructor does not have public access");
                    }
                    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
                }
                global::System.GC.SuppressFinalize(this);
            }
        }

        public static TfToken bindTransforms = new TfToken("bindTransforms");
        public static TfToken blendShapeWeights = new TfToken("blendShapeWeights");
        public static TfToken blendShapes = new TfToken("blendShapes");
        public static TfToken jointNames = new TfToken("jointNames");
        public static TfToken joints = new TfToken("joints");
        public static TfToken normalOffsets = new TfToken("normalOffsets");
        public static TfToken offsets = new TfToken("offsets");
        public static TfToken pointIndices = new TfToken("pointIndices");
        public static TfToken primvarsSkelGeomBindTransform = new TfToken("primvars:skel:geomBindTransform");
        public static TfToken primvarsSkelJointIndices = new TfToken("primvars:skel:jointIndices");
        public static TfToken primvarsSkelJointWeights = new TfToken("primvars:skel:jointWeights");
        public static TfToken restTransforms = new TfToken("restTransforms");
        public static TfToken rotations = new TfToken("rotations");
        public static TfToken scales = new TfToken("scales");
        public static TfToken skelAnimationSource = new TfToken("skel:animationSource");
        public static TfToken skelBlendShapeTargets = new TfToken("skel:blendShapeTargets");
        public static TfToken skelBlendShapes = new TfToken("skel:blendShapes");
        public static TfToken skelJoints = new TfToken("skel:joints");
        public static TfToken skelSkeleton = new TfToken("skel:skeleton");
        public static TfToken translations = new TfToken("translations");
        public static TfToken weight = new TfToken("weight");
    }
}
