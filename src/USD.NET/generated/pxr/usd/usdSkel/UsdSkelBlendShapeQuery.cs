//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdSkelBlendShapeQuery : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdSkelBlendShapeQuery(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSkelBlendShapeQuery obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdSkelBlendShapeQuery() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdSkelBlendShapeQuery(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdSkelBlendShapeQuery() : this(UsdCsPINVOKE.new_UsdSkelBlendShapeQuery__SWIG_0(), true) {
  }

  public UsdSkelBlendShapeQuery(UsdSkelBindingAPI binding) : this(UsdCsPINVOKE.new_UsdSkelBlendShapeQuery__SWIG_1(UsdSkelBindingAPI.getCPtr(binding)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsValid() {
    bool ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_IsValid(swigCPtr);
    return ret;
  }

  public UsdPrim GetPrim() {
    UsdPrim ret = new UsdPrim(UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetPrim(swigCPtr), false);
    return ret;
  }

  public UsdSkelBlendShape GetBlendShape(uint blendShapeIndex) {
    UsdSkelBlendShape ret = new UsdSkelBlendShape(UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetBlendShape(swigCPtr, blendShapeIndex), true);
    return ret;
  }

  public UsdSkelInbetweenShape GetInbetween(uint subShapeIndex) {
    UsdSkelInbetweenShape ret = new UsdSkelInbetweenShape(UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetInbetween(swigCPtr, subShapeIndex), true);
    return ret;
  }

  public uint GetBlendShapeIndex(uint subShapeIndex) {
    uint ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetBlendShapeIndex(swigCPtr, subShapeIndex);
    return ret;
  }

  public uint GetNumBlendShapes() {
    uint ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetNumBlendShapes(swigCPtr);
    return ret;
  }

  public uint GetNumSubShapes() {
    uint ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetNumSubShapes(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t ComputeBlendShapePointIndices() {
    SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t ret = new SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t(UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeBlendShapePointIndices(swigCPtr), true);
    return ret;
  }

  public VtVec3fArrayVector ComputeSubShapePointOffsets() {
    VtVec3fArrayVector ret = new VtVec3fArrayVector(UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeSubShapePointOffsets(swigCPtr), true);
    return ret;
  }

  public VtVec3fArrayVector ComputeSubShapeNormalOffsets() {
    VtVec3fArrayVector ret = new VtVec3fArrayVector(UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeSubShapeNormalOffsets(swigCPtr), true);
    return ret;
  }

  public bool ComputeSubShapeWeights(SWIGTYPE_p_TfSpanT_float_const_t weights, VtFloatArray subShapeWeights, VtUIntArray blendShapeIndices, VtUIntArray subShapeIndices) {
    bool ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeSubShapeWeights(swigCPtr, SWIGTYPE_p_TfSpanT_float_const_t.getCPtr(weights), VtFloatArray.getCPtr(subShapeWeights), VtUIntArray.getCPtr(blendShapeIndices), VtUIntArray.getCPtr(subShapeIndices));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeFlattenedSubShapeWeights(SWIGTYPE_p_TfSpanT_float_const_t weights, VtFloatArray subShapeWeights) {
    bool ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeFlattenedSubShapeWeights(swigCPtr, SWIGTYPE_p_TfSpanT_float_const_t.getCPtr(weights), VtFloatArray.getCPtr(subShapeWeights));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeDeformedPoints(SWIGTYPE_p_TfSpanT_float_const_t subShapeWeights, SWIGTYPE_p_TfSpanT_unsigned_int_const_t blendShapeIndices, SWIGTYPE_p_TfSpanT_unsigned_int_const_t subShapeIndices, SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t blendShapePointIndices, VtVec3fArrayVector subShapePointOffsets, SWIGTYPE_p_TfSpanT_GfVec3f_t points) {
    bool ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeDeformedPoints(swigCPtr, SWIGTYPE_p_TfSpanT_float_const_t.getCPtr(subShapeWeights), SWIGTYPE_p_TfSpanT_unsigned_int_const_t.getCPtr(blendShapeIndices), SWIGTYPE_p_TfSpanT_unsigned_int_const_t.getCPtr(subShapeIndices), SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t.getCPtr(blendShapePointIndices), VtVec3fArrayVector.getCPtr(subShapePointOffsets), SWIGTYPE_p_TfSpanT_GfVec3f_t.getCPtr(points));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeDeformedNormals(SWIGTYPE_p_TfSpanT_float_const_t subShapeWeights, SWIGTYPE_p_TfSpanT_unsigned_int_const_t blendShapeIndices, SWIGTYPE_p_TfSpanT_unsigned_int_const_t subShapeIndices, SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t blendShapePointIndices, VtVec3fArrayVector subShapeNormalOffsets, SWIGTYPE_p_TfSpanT_GfVec3f_t noramls) {
    bool ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputeDeformedNormals(swigCPtr, SWIGTYPE_p_TfSpanT_float_const_t.getCPtr(subShapeWeights), SWIGTYPE_p_TfSpanT_unsigned_int_const_t.getCPtr(blendShapeIndices), SWIGTYPE_p_TfSpanT_unsigned_int_const_t.getCPtr(subShapeIndices), SWIGTYPE_p_std__vectorT_VtArrayT_int_t_t.getCPtr(blendShapePointIndices), VtVec3fArrayVector.getCPtr(subShapeNormalOffsets), SWIGTYPE_p_TfSpanT_GfVec3f_t.getCPtr(noramls));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputePackedShapeTable(VtVec4fArray offsets, VtVec2iArray ranges) {
    bool ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_ComputePackedShapeTable(swigCPtr, VtVec4fArray.getCPtr(offsets), VtVec2iArray.getCPtr(ranges));
    return ret;
  }

  public string GetDescription() {
    string ret = UsdCsPINVOKE.UsdSkelBlendShapeQuery_GetDescription(swigCPtr);
    return ret;
  }

}

}
